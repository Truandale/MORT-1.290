using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;

namespace MORT
{
    /// <summary>
    /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞
    /// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ VB-Cable
    /// </summary>
    public class UniversalAudioTranslateManager : IDisposable
    {
        private SystemAudioManager? _systemAudioManager;
        private AudioRouter? _inputRouter;    // –†–µ–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω ‚Üí VB-Cable Input
        private AudioRouter? _outputRouter;   // VB-Cable Output ‚Üí –†–µ–∞–ª—å–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏
        private AdvancedAudioSettings? _audioTranslator;
        private SettingManager? _settingsManager;
        private bool _disposed = false;

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        private bool _isUniversalModeActive = false;
        private bool _isTranslationActive = false;
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        private string? _vbCableInputId;
        private string? _vbCableOutputId;
        private string? _selectedPhysicalMicId;
        private string? _selectedPhysicalSpeakersId;
        
        // –ù–∞–∑–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        private string _vbInputName = "";
        private string _vbOutputName = "";
        private string _physicalMicName = "";
        private string _physicalSpeakersName = "";

        public event Action<string>? OnLog;
        public event Action<bool>? OnUniversalModeChanged;
        public event Action<bool>? OnTranslationStateChanged;

        public bool IsUniversalModeActive => _isUniversalModeActive;
        public bool IsTranslationActive => _isTranslationActive;

        public UniversalAudioTranslateManager(SettingManager settingsManager)
        {
            _settingsManager = settingsManager;
            _systemAudioManager = new SystemAudioManager();
            _systemAudioManager.OnLog += (msg) => OnLog?.Invoke(msg);
            
            _inputRouter = new AudioRouter();
            _inputRouter.OnLog += (msg) => OnLog?.Invoke($"[INPUT] {msg}");
            
            _outputRouter = new AudioRouter();
            _outputRouter.OnLog += (msg) => OnLog?.Invoke($"[OUTPUT] {msg}");

            LoadConfiguration();
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        /// </summary>
        private void LoadConfiguration()
        {
            try
            {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ä–µ–µ—Å—Ç—Ä–∞
                OnLog?.Invoke("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        /// </summary>
        public Task<bool> AutoDetectAndConfigureAsync()
        {
            try
            {
                OnLog?.Invoke("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...");

                if (_systemAudioManager == null) return Task.FromResult(false);

                // –ü–æ–∏—Å–∫ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                var (vbInputId, vbOutputId, vbInputName, vbOutputName) = _systemAudioManager.FindVBCableDevices();
                
                if (vbInputId == null || vbOutputId == null)
                {
                    OnLog?.Invoke("‚ùå VB-Cable –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VB-Cable –¥–ª—è —Ä–∞–±–æ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.");
                    return Task.FromResult(false);
                }

                _vbCableInputId = vbInputId;
                _vbCableOutputId = vbOutputId;
                _vbInputName = vbInputName;
                _vbOutputName = vbOutputName;

                // –ü–æ–∏—Å–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                var (microphones, speakers) = _systemAudioManager.FindPhysicalDevices();
                
                if (microphones.Count == 0 || speakers.Count == 0)
                {
                    OnLog?.Invoke("‚ùå –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                    return Task.FromResult(false);
                }

                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                var selectedMic = microphones.First();
                var selectedSpeakers = speakers.First();
                
                _selectedPhysicalMicId = selectedMic.id;
                _selectedPhysicalSpeakersId = selectedSpeakers.id;
                _physicalMicName = selectedMic.name;
                _physicalSpeakersName = selectedSpeakers.name;

                OnLog?.Invoke("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:");
                OnLog?.Invoke($"   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: {_physicalMicName}");
                OnLog?.Invoke($"   üîä –î–∏–Ω–∞–º–∏–∫–∏: {_physicalSpeakersName}");
                OnLog?.Invoke($"   üîó VB-Cable: {_vbInputName} | {_vbOutputName}");

                return Task.FromResult(true);
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {ex.Message}");
                return Task.FromResult(false);
            }
        }

        /// <summary>
        /// –í–∫–ª—é—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞
        /// </summary>
        public async Task<bool> EnableUniversalModeAsync()
        {
            try
            {
                if (_isUniversalModeActive)
                {
                    OnLog?.Invoke("‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
                    return true;
                }

                OnLog?.Invoke("üöÄ –í–∫–ª—é—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞...");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                if (!await AutoDetectAndConfigureAsync())
                {
                    return false;
                }

                if (_systemAudioManager == null || _inputRouter == null || _outputRouter == null)
                {
                    OnLog?.Invoke("‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
                    return false;
                }

                // –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                OnLog?.Invoke("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...");
                
                if (!_systemAudioManager.SetDefaultInputDevice(_vbCableInputId!, true))
                {
                    OnLog?.Invoke("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VB-Cable Input –∫–∞–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    return false;
                }

                if (!_systemAudioManager.SetDefaultOutputDevice(_vbCableOutputId!, true))
                {
                    OnLog?.Invoke("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VB-Cable Output –∫–∞–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    return false;
                }

                // –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞
                OnLog?.Invoke("üîÑ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...");
                
                // –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è AudioRouter
                var micIndex = FindDeviceIndex(_selectedPhysicalMicId!, true);
                var speakersIndex = FindDeviceIndex(_selectedPhysicalSpeakersId!, false);
                var vbInputIndex = FindDeviceIndex(_vbCableInputId!, true);
                var vbOutputIndex = FindDeviceIndex(_vbCableOutputId!, false);

                if (micIndex == -1 || speakersIndex == -1 || vbInputIndex == -1 || vbOutputIndex == -1)
                {
                    OnLog?.Invoke("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
                    return false;
                }

                // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: –†–µ–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω ‚Üí VB-Cable Input
                if (!await _inputRouter.StartRoutingAsync(micIndex, vbInputIndex, _physicalMicName, _vbInputName))
                {
                    OnLog?.Invoke("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
                    return false;
                }

                // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: VB-Cable Output ‚Üí –†–µ–∞–ª—å–Ω—ã–µ –¥–∏–Ω–∞–º–∏–∫–∏
                if (!await _outputRouter.StartRoutingAsync(vbOutputIndex, speakersIndex, _vbOutputName, _physicalSpeakersName))
                {
                    OnLog?.Invoke("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
                    _inputRouter.StopRouting();
                    return false;
                }

                _isUniversalModeActive = true;
                OnUniversalModeChanged?.Invoke(true);

                OnLog?.Invoke("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞ –≤–∫–ª—é—á–µ–Ω!");
                OnLog?.Invoke("üéØ –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
                OnLog?.Invoke("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–º");

                return true;
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –í—ã–∫–ª—é—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞
        /// </summary>
        public async Task<bool> DisableUniversalModeAsync()
        {
            try
            {
                if (!_isUniversalModeActive)
                {
                    OnLog?.Invoke("‚ö†Ô∏è –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω");
                    return true;
                }

                OnLog?.Invoke("üõë –í—ã–∫–ª—é—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞...");

                // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
                if (_isTranslationActive)
                {
                    await StopTranslationAsync();
                }

                // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
                if (_inputRouter != null && _inputRouter.IsRouting)
                {
                    _inputRouter.StopRouting();
                }

                if (_outputRouter != null && _outputRouter.IsRouting)
                {
                    _outputRouter.StopRouting();
                }

                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if (_systemAudioManager != null)
                {
                    _systemAudioManager.RestoreOriginalDevices();
                }

                _isUniversalModeActive = false;
                OnUniversalModeChanged?.Invoke(false);

                OnLog?.Invoke("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");

                return true;
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ)
        /// </summary>
        public Task<bool> StartTranslationAsync()
        {
            try
            {
                if (!_isUniversalModeActive)
                {
                    OnLog?.Invoke("‚ö†Ô∏è –í–∫–ª—é—á–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º");
                    return Task.FromResult(false);
                }

                if (_isTranslationActive)
                {
                    OnLog?.Invoke("‚ö†Ô∏è –ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
                    return Task.FromResult(true);
                }

                OnLog?.Invoke("üéØ –ó–∞–ø—É—Å–∫ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞...");

                // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Audio Translator
                // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä AdvancedAudioSettings –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if (_audioTranslator == null && _settingsManager != null)
                {
                    _audioTranslator = new AdvancedAudioSettings(_settingsManager);
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
                    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑ UI
                }

                _isTranslationActive = true;
                OnTranslationStateChanged?.Invoke(true);

                OnLog?.Invoke("‚úÖ –ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω!");
                OnLog?.Invoke("üîÑ –í–µ—Å—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

                return Task.FromResult(true);
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                return Task.FromResult(false);
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥
        /// </summary>
        public Task<bool> StopTranslationAsync()
        {
            try
            {
                if (!_isTranslationActive)
                {
                    OnLog?.Invoke("‚ö†Ô∏è –ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω");
                    return Task.FromResult(true);
                }

                OnLog?.Invoke("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞...");

                // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Audio Translator
                if (_audioTranslator != null)
                {
                    _audioTranslator.Dispose();
                    _audioTranslator = null;
                }

                _isTranslationActive = false;
                OnTranslationStateChanged?.Invoke(false);

                OnLog?.Invoke("‚úÖ –ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

                return Task.FromResult(true);
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
                return Task.FromResult(false);
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞
        /// </summary>
        public async Task<bool> ToggleTranslationAsync()
        {
            if (_isTranslationActive)
            {
                return await StopTranslationAsync();
            }
            else
            {
                return await StartTranslationAsync();
            }
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ ID –¥–ª—è AudioRouter
        /// </summary>
        private int FindDeviceIndex(string deviceId, bool isInput)
        {
            try
            {
                if (isInput)
                {
                    for (int i = 0; i < NAudio.Wave.WaveInEvent.DeviceCount; i++)
                    {
                        var caps = NAudio.Wave.WaveInEvent.GetCapabilities(i);
                        // –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–∏–µ)
                        if (caps.ProductName.Contains(deviceId) || deviceId.Contains(caps.ProductName))
                        {
                            return i;
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < NAudio.Wave.WaveOut.DeviceCount; i++)
                    {
                        var caps = NAudio.Wave.WaveOut.GetCapabilities(i);
                        if (caps.ProductName.Contains(deviceId) || deviceId.Contains(caps.ProductName))
                        {
                            return i;
                        }
                    }
                }

                return -1;
            }
            catch
            {
                return -1;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        /// </summary>
        public string GetSystemStatus()
        {
            var status = "üìä –°—Ç–∞—Ç—É—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞:\n";
            status += $"   üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: {(_isUniversalModeActive ? "‚úÖ –í–∫–ª—é—á–µ–Ω" : "‚ùå –í—ã–∫–ª—é—á–µ–Ω")}\n";
            status += $"   üéØ –ê—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥: {(_isTranslationActive ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}\n";
            
            if (_isUniversalModeActive)
            {
                status += $"   üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω: {_physicalMicName} ‚Üí {_vbInputName}\n";
                status += $"   üîä –î–∏–Ω–∞–º–∏–∫–∏: {_vbOutputName} ‚Üí {_physicalSpeakersName}\n";
                status += $"   üîÑ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {(_inputRouter?.IsRouting == true && _outputRouter?.IsRouting == true ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞")}";
            }

            return status;
        }

        public void Dispose()
        {
            if (!_disposed)
            {
                DisableUniversalModeAsync().Wait();
                
                _systemAudioManager?.Dispose();
                _inputRouter?.Dispose();
                _outputRouter?.Dispose();
                _audioTranslator?.Dispose();
                
                _disposed = true;
            }
        }
    }
}
