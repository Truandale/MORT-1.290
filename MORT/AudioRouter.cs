using System;
using System.Threading.Tasks;
using NAudio.Wave;

namespace MORT
{
    /// <summary>
    /// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    /// </summary>
    public class AudioRouter : IDisposable
    {
        private WaveInEvent? _inputDevice;
        private WaveOutEvent? _outputDevice;
        private BufferedWaveProvider? _waveProvider;
        private bool _isRouting = false;
        private bool _disposed = false;

        public bool IsRouting => _isRouting;
        public string CurrentRoute { get; private set; } = "";

        /// <summary>
        /// –°–æ–±—ã—Ç–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        public event Action<string>? OnLog;

        /// <summary>
        /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
        /// </summary>
        /// <param name="inputDeviceIndex">–ò–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω/–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥)</param>
        /// <param name="outputDeviceIndex">–ò–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–∏–Ω–∞–º–∏–∫–∏/–Ω–∞—É—à–Ω–∏–∫–∏)</param>
        /// <param name="inputDeviceName">–ù–∞–∑–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</param>
        /// <param name="outputDeviceName">–ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è</param>
        public async Task<bool> StartRoutingAsync(int inputDeviceIndex, int outputDeviceIndex, string inputDeviceName, string outputDeviceName)
        {
            try
            {
                if (_isRouting)
                {
                    OnLog?.Invoke("‚ö†Ô∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ.");
                    return false;
                }

                OnLog?.Invoke($"üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {inputDeviceName} ‚Üí {outputDeviceName}");

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                if (inputDeviceIndex < 0 || inputDeviceIndex >= WaveInEvent.DeviceCount)
                {
                    OnLog?.Invoke($"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {inputDeviceIndex}");
                    return false;
                }

                if (outputDeviceIndex < 0 || outputDeviceIndex >= WaveOut.DeviceCount)
                {
                    OnLog?.Invoke($"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {outputDeviceIndex}");
                    return false;
                }

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                _inputDevice = new WaveInEvent();
                _inputDevice.DeviceNumber = inputDeviceIndex;
                _inputDevice.WaveFormat = new WaveFormat(44100, 16, 2); // 44.1kHz, 16-bit, stereo

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                _outputDevice = new WaveOutEvent();
                _outputDevice.DeviceNumber = outputDeviceIndex;

                // –ë—É—Ñ–µ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö (2 —Å–µ–∫—É–Ω–¥—ã –±—É—Ñ–µ—Ä–∞)
                _waveProvider = new BufferedWaveProvider(_inputDevice.WaveFormat)
                {
                    BufferLength = _inputDevice.WaveFormat.AverageBytesPerSecond * 2,
                    DiscardOnBufferOverflow = true
                };

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
                _inputDevice.DataAvailable += OnDataAvailable;
                _inputDevice.RecordingStopped += OnRecordingStopped;

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
                _outputDevice.Init(_waveProvider);
                
                await Task.Run(() => {
                    _inputDevice.StartRecording();
                    _outputDevice.Play();
                });

                _isRouting = true;
                CurrentRoute = $"{inputDeviceName} ‚Üí {outputDeviceName}";
                
                OnLog?.Invoke($"‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {CurrentRoute}");
                OnLog?.Invoke($"üìä –§–æ—Ä–º–∞—Ç: {_inputDevice.WaveFormat}");
                
                return true;
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {ex.Message}");
                StopRouting();
                return false;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞
        /// </summary>
        public void StopRouting()
        {
            try
            {
                if (!_isRouting)
                {
                    OnLog?.Invoke("‚ÑπÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
                    return;
                }

                OnLog?.Invoke($"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {CurrentRoute}");

                _inputDevice?.StopRecording();
                _outputDevice?.Stop();

                _isRouting = false;
                CurrentRoute = "";

                OnLog?.Invoke("‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private void OnDataAvailable(object? sender, WaveInEventArgs e)
        {
            try
            {
                if (_waveProvider != null && _isRouting)
                {
                    _waveProvider.AddSamples(e.Buffer, 0, e.BytesRecorded);
                }
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
        /// </summary>
        private void OnRecordingStopped(object? sender, StoppedEventArgs e)
        {
            if (e.Exception != null)
            {
                OnLog?.Invoke($"‚ùå –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {e.Exception.Message}");
            }
            else
            {
                OnLog?.Invoke("‚ÑπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—É—Ñ–µ—Ä–∞
        /// </summary>
        public string GetBufferStats()
        {
            if (_waveProvider == null || !_isRouting)
                return "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ";

            var bufferedMs = _waveProvider.BufferedDuration.TotalMilliseconds;
            var bufferLengthMs = (_waveProvider.BufferLength * 1000.0) / _waveProvider.WaveFormat.AverageBytesPerSecond;
            
            return $"–ë—É—Ñ–µ—Ä: {bufferedMs:F0}–º—Å / {bufferLengthMs:F0}–º—Å";
        }

        public void Dispose()
        {
            if (!_disposed)
            {
                StopRouting();

                _inputDevice?.Dispose();
                _outputDevice?.Dispose();
                _waveProvider = null;

                _disposed = true;
            }
        }
    }
}
