using System;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;
using NAudio.Wave;
using NAudio.CoreAudioApi;
using Microsoft.Win32;
using System.Collections.Generic;
using System.Linq;

namespace MORT
{
    public partial class AdvancedAudioSettings : Form
    {
        #region Controls Declaration
        
        // Main container
        private TabControl? mainTabControl;
        
        // Mode Selection Tab
        private GroupBox? gbWorkMode;
        private RadioButton? rbModeOff;
        private RadioButton? rbModeIncoming;
        private RadioButton? rbModeOutgoing;
        private RadioButton? rbModeBidirectional;
        
        // STT Settings Tab
        private GroupBox? gbSTTSettings;
        private ComboBox? cbSTTEngine;
        private ComboBox? cbWhisperModel;
        private ComboBox? cbVoskModel;
        private TrackBar? tbSTTSensitivity;
        private Label? lblSTTSensitivity;
        
        // TTS Settings Tab
        private GroupBox? gbTTSSettings;
        private ComboBox? cbTTSEngine;
        private ComboBox? cbTTSVoiceRU;
        private ComboBox? cbTTSVoiceEN;
        private TrackBar? tbTTSSpeedRU;
        private TrackBar? tbTTSSpeedEN;
        private TrackBar? tbTTSVolumeRU;
        private TrackBar? tbTTSVolumeEN;
        
        // Audio Devices Tab
        private GroupBox? gbAudioDevices;
        private ComboBox? cbMicrophone;
        private ComboBox? cbSpeakers;
        private ComboBox? cbHeadphones;
        private ComboBox? cbVBCable;
        private Button? btnTestMicrophone;
        private Button? btnTestSpeakers;
        private Button? btnTestVBCable;
        
        // VAD Settings Tab
        private GroupBox? gbVADSettings;
        private TrackBar? tbVADThreshold;
        private TrackBar? tbMinDuration;
        private TrackBar? tbSilenceTimeout;
        private CheckBox? cbEnableVAD;
        private Label? lblVADThreshold;
        private Label? lblMinDuration;
        private Label? lblSilenceTimeout;
        
        // Translation Settings Tab
        private GroupBox? gbTranslationSettings;
        private ComboBox? cbTranslationEngine;
        private TextBox? tbLibreTranslateURL;
        private ComboBox? cbSourceLanguage;
        private ComboBox? cbTargetLanguage;
        private Button? btnTestTranslation;
        
        // Monitoring Tab
        private GroupBox? gbMonitoring;
        private TextBox? tbIncomingText;
        private TextBox? tbTranslatedText;
        private TextBox? tbOutgoingText;
        private ProgressBar? pbMicLevel;
        private ProgressBar? pbSpeakerLevel;
        private Label? lblStatus;
        private Label? lblLatency;
        
        // Control Buttons
        private Button? btnStart;
        private Button? btnStop;
        private Button? btnPause;
        private Button? btnApply;
        private Button? btnCancel;
        private Button? btnOK;
        
        // Settings Manager Reference
        private SettingManager? settingManager;
        
        // Audio Device Tester
        private AudioDeviceTester? audioTester;
        
        // Experimental Audio Router
        private AudioRouter? audioRouter;
        
        // Audio Routing Controls
        private GroupBox? gbAudioRouting;
        private CheckBox? cbEnableRouting;
        private ComboBox? cbRoutingInput;
        private ComboBox? cbRoutingOutput;
        private Button? btnStartRouting;
        private Button? btnStopRouting;
        private TextBox? tbRoutingLog;
        private Timer? routingStatusTimer;
        
        #endregion

        public AdvancedAudioSettings()
        {
            audioTester = new AudioDeviceTester();
            audioRouter = new AudioRouter();
            InitializeComponent();
            InitializeCustomControls();
            LoadSettings();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            audioRouter.OnLog += LogMessage;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ TTS –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
            LoadTTSVoices();
        }

        public AdvancedAudioSettings(SettingManager settingManager)
        {
            audioTester = new AudioDeviceTester();
            audioRouter = new AudioRouter();
            this.settingManager = settingManager;
            InitializeComponent();
            InitializeCustomControls();
            LoadSettings();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            audioRouter.OnLog += LogMessage;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ TTS –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ä–º—ã
            LoadTTSVoices();
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            // Form properties
            this.Text = "AutoVoiceTranslator - –ù–∞—Å—Ç—Ä–æ–π–∫–∏";
            this.Size = new Size(800, 600);
            this.StartPosition = FormStartPosition.CenterParent;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.BackColor = Color.LightGray;
            this.ForeColor = Color.Black;
            
            this.ResumeLayout(false);
        }

        private void InitializeCustomControls()
        {
            // Main TabControl
            mainTabControl = new TabControl()
            {
                Location = new Point(10, 10),
                Size = new Size(760, 500),
                Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom
            };

            // Create tabs
            CreateModeTab();
            CreateSTTTab();
            CreateTTSTab();
            CreateAudioDevicesTab();
            CreateAudioRoutingTab(); // –ù–æ–≤–∞—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
            CreateVADTab();
            CreateTranslationTab();
            CreateMonitoringTab();

            this.Controls.Add(mainTabControl);

            // Control buttons
            CreateControlButtons();
        }

        private void CreateModeTab()
        {
            TabPage modeTab = new TabPage("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã");
            
            gbWorkMode = new GroupBox()
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
                Location = new Point(10, 10),
                Size = new Size(720, 140),
                ForeColor = Color.Black
            };

            rbModeOff = new RadioButton()
            {
                Text = "üî¥ –í—ã–∫–ª—é—á–µ–Ω",
                Location = new Point(20, 30),
                Size = new Size(150, 25),
                ForeColor = Color.Black,
                Checked = true
            };

            rbModeIncoming = new RadioButton()
            {
                Text = "üì• –í—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ (EN‚ÜíRU)",
                Location = new Point(20, 60),
                Size = new Size(250, 25),
                ForeColor = Color.Black
            };

            rbModeOutgoing = new RadioButton()
            {
                Text = "üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ (RU‚ÜíEN)",
                Location = new Point(300, 60),
                Size = new Size(250, 25),
                ForeColor = Color.Black
            };

            rbModeBidirectional = new RadioButton()
            {
                Text = "üîÑ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥",
                Location = new Point(20, 90),
                Size = new Size(250, 25),
                ForeColor = Color.Black
            };

            gbWorkMode.Controls.AddRange(new Control[] 
            { 
                rbModeOff, rbModeIncoming, rbModeOutgoing, rbModeBidirectional 
            });
            
            modeTab.Controls.Add(gbWorkMode);
            mainTabControl?.TabPages.Add(modeTab);
        }

        private void CreateSTTTab()
        {
            TabPage sttTab = new TabPage("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)");
            
            gbSTTSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Speech-to-Text",
                Location = new Point(10, 10),
                Size = new Size(720, 200),
                ForeColor = Color.Black
            };

            // STT Engine
            Label lblSTTEngine = new Label()
            {
                Text = "–î–≤–∏–∂–æ–∫ STT:",
                Location = new Point(20, 30),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbSTTEngine = new ComboBox()
            {
                Location = new Point(130, 28),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbSTTEngine.Items.AddRange(new string[] { "Whisper.NET", "Vosk.NET" });
            cbSTTEngine.SelectedIndex = 0;

            // Whisper Model
            Label lblWhisperModel = new Label()
            {
                Text = "–ú–æ–¥–µ–ª—å Whisper:",
                Location = new Point(20, 65),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbWhisperModel = new ComboBox()
            {
                Location = new Point(130, 63),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbWhisperModel.Items.AddRange(new string[] 
            { 
                "tiny (39MB, –±—ã—Å—Ç—Ä–∞—è)", 
                "base (74MB, –±–∞–∑–æ–≤–∞—è)", 
                "small (244MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
                "medium (769MB, —Ö–æ—Ä–æ—à–∞—è)", 
                "large (1550MB, –ª—É—á—à–∞—è)" 
            });
            cbWhisperModel.SelectedIndex = 2;

            // Vosk Model
            Label lblVoskModel = new Label()
            {
                Text = "–ú–æ–¥–µ–ª—å Vosk:",
                Location = new Point(20, 100),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbVoskModel = new ComboBox()
            {
                Location = new Point(130, 98),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbVoskModel.Items.AddRange(new string[] 
            { 
                "vosk-model-ru-0.42 (–†—É—Å—Å–∫–∏–π)", 
                "vosk-model-en-us-0.22 (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π)",
                "vosk-model-small-ru-0.22 (–†—É—Å—Å–∫–∏–π –º–∞–ª—ã–π)",
                "vosk-model-small-en-us-0.15 (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –º–∞–ª—ã–π)"
            });

            // STT Sensitivity
            lblSTTSensitivity = new Label()
            {
                Text = "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 50%",
                Location = new Point(20, 135),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            tbSTTSensitivity = new TrackBar()
            {
                Location = new Point(130, 130),
                Size = new Size(200, 45),
                Minimum = 0,
                Maximum = 100,
                Value = 50,
                TickFrequency = 10
            };
            tbSTTSensitivity.ValueChanged += (s, e) => 
            {
                lblSTTSensitivity.Text = $"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tbSTTSensitivity.Value}%";
            };

            gbSTTSettings.Controls.AddRange(new Control[] 
            { 
                lblSTTEngine, cbSTTEngine,
                lblWhisperModel, cbWhisperModel,
                lblVoskModel, cbVoskModel,
                lblSTTSensitivity, tbSTTSensitivity
            });
            
            sttTab.Controls.Add(gbSTTSettings);
            mainTabControl?.TabPages.Add(sttTab);
        }

        private void CreateTTSTab()
        {
            TabPage ttsTab = new TabPage("–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (TTS)");
            
            gbTTSSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Text-to-Speech",
                Location = new Point(10, 10),
                Size = new Size(720, 250),
                ForeColor = Color.Black
            };

            // TTS Engine
            Label lblTTSEngine = new Label()
            {
                Text = "–î–≤–∏–∂–æ–∫ TTS:",
                Location = new Point(20, 30),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbTTSEngine = new ComboBox()
            {
                Location = new Point(130, 28),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbTTSEngine.Items.AddRange(new string[] { "System.Speech", "Azure TTS" });
            cbTTSEngine.SelectedIndex = 0;

            // Russian Voice
            Label lblTTSVoiceRU = new Label()
            {
                Text = "–ì–æ–ª–æ—Å (RU):",
                Location = new Point(20, 65),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbTTSVoiceRU = new ComboBox()
            {
                Location = new Point(130, 63),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // English Voice
            Label lblTTSVoiceEN = new Label()
            {
                Text = "–ì–æ–ª–æ—Å (EN):",
                Location = new Point(350, 65),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbTTSVoiceEN = new ComboBox()
            {
                Location = new Point(460, 63),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // Speed controls
            Label lblSpeedRU = new Label()
            {
                Text = "–°–∫–æ—Ä–æ—Å—Ç—å RU: 50%",
                Location = new Point(20, 100),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSSpeedRU = new TrackBar()
            {
                Location = new Point(130, 95),
                Size = new Size(150, 45),
                Minimum = 10,
                Maximum = 200,
                Value = 100,
                TickFrequency = 20
            };

            Label lblSpeedEN = new Label()
            {
                Text = "–°–∫–æ—Ä–æ—Å—Ç—å EN: 50%",
                Location = new Point(350, 100),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSSpeedEN = new TrackBar()
            {
                Location = new Point(460, 95),
                Size = new Size(150, 45),
                Minimum = 10,
                Maximum = 200,
                Value = 100,
                TickFrequency = 20
            };

            // Volume controls
            Label lblVolumeRU = new Label()
            {
                Text = "–ì—Ä–æ–º–∫–æ—Å—Ç—å RU: 100%",
                Location = new Point(20, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSVolumeRU = new TrackBar()
            {
                Location = new Point(130, 145),
                Size = new Size(150, 45),
                Minimum = 0,
                Maximum = 100,
                Value = 100,
                TickFrequency = 10
            };

            Label lblVolumeEN = new Label()
            {
                Text = "–ì—Ä–æ–º–∫–æ—Å—Ç—å EN: 100%",
                Location = new Point(350, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSVolumeEN = new TrackBar()
            {
                Location = new Point(460, 145),
                Size = new Size(150, 45),
                Minimum = 0,
                Maximum = 100,
                Value = 100,
                TickFrequency = 10
            };

            gbTTSSettings.Controls.AddRange(new Control[] 
            { 
                lblTTSEngine, cbTTSEngine,
                lblTTSVoiceRU, cbTTSVoiceRU,
                lblTTSVoiceEN, cbTTSVoiceEN,
                lblSpeedRU, tbTTSSpeedRU,
                lblSpeedEN, tbTTSSpeedEN,
                lblVolumeRU, tbTTSVolumeRU,
                lblVolumeEN, tbTTSVolumeEN
            });
            
            ttsTab.Controls.Add(gbTTSSettings);
            mainTabControl?.TabPages.Add(ttsTab);
        }

        private void CreateAudioDevicesTab()
        {
            TabPage devicesTab = new TabPage("–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
            
            gbAudioDevices = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                Location = new Point(10, 10),
                Size = new Size(720, 300),
                ForeColor = Color.Black
            };

            // Microphone
            Label lblMicrophone = new Label()
            {
                Text = "üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω:",
                Location = new Point(20, 30),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbMicrophone = new ComboBox()
            {
                Location = new Point(130, 28),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            btnTestMicrophone = new Button()
            {
                Text = "–¢–µ—Å—Ç",
                Location = new Point(440, 27),
                Size = new Size(60, 25),
                ForeColor = Color.Black,
                BackColor = Color.LightBlue, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                Name = "btnTestMicrophone",
                Enabled = true,
                Visible = true,
                TabStop = true,
                UseVisualStyleBackColor = false
            };
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            btnTestMicrophone.Click += async (s, e) => {
                await TestMicrophoneDevice();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            btnTestMicrophone.MouseEnter += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
                btnTestMicrophone.BackColor = Color.Blue;
            };
            btnTestMicrophone.MouseLeave += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
                btnTestMicrophone.BackColor = Color.LightBlue;
            };

            // Speakers
            Label lblSpeakers = new Label()
            {
                Text = "üîä –î–∏–Ω–∞–º–∏–∫–∏:",
                Location = new Point(20, 70),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbSpeakers = new ComboBox()
            {
                Location = new Point(130, 68),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            btnTestSpeakers = new Button()
            {
                Text = "–¢–µ—Å—Ç",
                Location = new Point(440, 67),
                Size = new Size(60, 25),
                ForeColor = Color.Black,
                BackColor = Color.LightGreen, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                Name = "btnTestSpeakers",
                Enabled = true,
                Visible = true,
                TabStop = true,
                UseVisualStyleBackColor = false
            };
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏–∫–æ–≤
            btnTestSpeakers.Click += async (s, e) => {
                await TestSpeakersDevice();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            btnTestSpeakers.MouseEnter += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                btnTestSpeakers.BackColor = Color.Green;
            };
            btnTestSpeakers.MouseLeave += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                btnTestSpeakers.BackColor = Color.LightGreen;
            };

            // Headphones
            Label lblHeadphones = new Label()
            {
                Text = "üéß –ù–∞—É—à–Ω–∏–∫–∏:",
                Location = new Point(20, 110),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbHeadphones = new ComboBox()
            {
                Location = new Point(130, 108),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // VB-Cable
            Label lblVBCable = new Label()
            {
                Text = "üéõÔ∏è VB-Cable:",
                Location = new Point(20, 150),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbVBCable = new ComboBox()
            {
                Location = new Point(130, 148),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            btnTestVBCable = new Button()
            {
                Text = "–¢–µ—Å—Ç",
                Location = new Point(440, 147),
                Size = new Size(60, 25),
                ForeColor = Color.Black,
                BackColor = Color.LightYellow, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                Name = "btnTestVBCable",
                Enabled = true,
                Visible = true,
                TabStop = true,
                UseVisualStyleBackColor = false
            };
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º VB-Cable
            btnTestVBCable.Click += async (s, e) => {
                await TestVBCableDevice();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            btnTestVBCable.MouseEnter += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ VB-Cable");
                btnTestVBCable.BackColor = Color.Yellow;
            };
            btnTestVBCable.MouseLeave += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ VB-Cable");
                btnTestVBCable.BackColor = Color.LightYellow;
            };

            // Status info
            Label lblDeviceInfo = new Label()
            {
                Text = "‚ÑπÔ∏è VB-Cable –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Discord/–∏–≥—Ä–µ",
                Location = new Point(20, 190),
                Size = new Size(600, 40),
                ForeColor = Color.DarkBlue
            };

            // Test All Devices button
            Button btnTestAllDevices = new Button()
            {
                Text = "üîç –¢–µ—Å—Ç –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                Location = new Point(20, 240),
                Size = new Size(200, 30),
                ForeColor = Color.Black,
                BackColor = Color.LightGreen
            };
            btnTestAllDevices.Click += OnClick_TestAllAudioDevices;

            gbAudioDevices.Controls.AddRange(new Control[] 
            { 
                lblMicrophone, cbMicrophone, btnTestMicrophone,
                lblSpeakers, cbSpeakers, btnTestSpeakers,
                lblHeadphones, cbHeadphones,
                lblVBCable, cbVBCable, btnTestVBCable,
                lblDeviceInfo,
                btnTestAllDevices
            });
            
            devicesTab.Controls.Add(gbAudioDevices);
            mainTabControl?.TabPages.Add(devicesTab);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            LoadAudioDevices();
        }

        private void CreateAudioRoutingTab()
        {
            TabPage routingTab = new TabPage("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–û)");
            
            gbAudioRouting = new GroupBox()
            {
                Text = "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞",
                Location = new Point(10, 10),
                Size = new Size(720, 400),
                ForeColor = Color.Black
            };

            // Warning label
            Label lblWarning = new Label()
            {
                Text = "‚ö†Ô∏è –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø! –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VB-Audio Virtual Cable –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ-—Ä–æ—É—Ç–∏–Ω–≥–∞.",
                Location = new Point(20, 25),
                Size = new Size(680, 40),
                ForeColor = Color.DarkRed,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            // Enable routing checkbox
            cbEnableRouting = new CheckBox()
            {
                Text = "üîÑ –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ",
                Location = new Point(20, 75),
                Size = new Size(250, 20),
                ForeColor = Color.Black,
                Checked = false
            };
            cbEnableRouting.CheckedChanged += OnRoutingEnabledChanged;

            // Input device selection
            Label lblRoutingInput = new Label()
            {
                Text = "–ò—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞):",
                Location = new Point(20, 110),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbRoutingInput = new ComboBox()
            {
                Location = new Point(150, 108),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Enabled = false
            };

            // Output device selection
            Label lblRoutingOutput = new Label()
            {
                Text = "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–∫—É–¥–∞):",
                Location = new Point(20, 145),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbRoutingOutput = new ComboBox()
            {
                Location = new Point(150, 143),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Enabled = false
            };

            // Control buttons
            btnStartRouting = new Button()
            {
                Text = "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                Location = new Point(470, 108),
                Size = new Size(100, 30),
                ForeColor = Color.White,
                BackColor = Color.Green,
                Enabled = false
            };
            btnStartRouting.Click += OnStartRouting;

            btnStopRouting = new Button()
            {
                Text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                Location = new Point(580, 108),
                Size = new Size(100, 30),
                ForeColor = Color.White,
                BackColor = Color.Red,
                Enabled = false
            };
            btnStopRouting.Click += OnStopRouting;

            // Log output
            Label lblLog = new Label()
            {
                Text = "–ñ—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                Location = new Point(20, 185),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbRoutingLog = new TextBox()
            {
                Location = new Point(20, 210),
                Size = new Size(680, 120),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.Black,
                ForeColor = Color.LimeGreen,
                Font = new Font("Consolas", 9),
                Text = "üìù –ñ—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ...\r\n"
            };

            // Status update timer
            routingStatusTimer = new Timer()
            {
                Interval = 1000, // Update every second
                Enabled = false
            };
            routingStatusTimer.Tick += OnRoutingStatusTick;

            gbAudioRouting.Controls.AddRange(new Control[] 
            { 
                lblWarning,
                cbEnableRouting,
                lblRoutingInput, cbRoutingInput,
                lblRoutingOutput, cbRoutingOutput,
                btnStartRouting, btnStopRouting,
                lblLog, tbRoutingLog
            });
            
            routingTab.Controls.Add(gbAudioRouting);
            mainTabControl?.TabPages.Add(routingTab);
            
            // Load audio devices for routing
            LoadRoutingDevices();
        }

        private void CreateVADTab()
        {
            TabPage vadTab = new TabPage("VAD (–î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ—á–∏)");
            
            gbVADSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Voice Activity Detection",
                Location = new Point(10, 10),
                Size = new Size(720, 250),
                ForeColor = Color.Black
            };

            cbEnableVAD = new CheckBox()
            {
                Text = "‚úÖ –í–∫–ª—é—á–∏—Ç—å VAD (Silero Neural Network)",
                Location = new Point(20, 30),
                Size = new Size(300, 20),
                ForeColor = Color.Black,
                Checked = true
            };

            // VAD Threshold
            lblVADThreshold = new Label()
            {
                Text = "–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏: 0.5",
                Location = new Point(20, 70),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbVADThreshold = new TrackBar()
            {
                Location = new Point(230, 65),
                Size = new Size(200, 45),
                Minimum = 10,
                Maximum = 95,
                Value = 50,
                TickFrequency = 5
            };
            tbVADThreshold.ValueChanged += (s, e) => 
            {
                lblVADThreshold.Text = $"–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏: {tbVADThreshold.Value / 100.0:F2}";
            };

            // Min Duration
            lblMinDuration = new Label()
            {
                Text = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0.5 —Å–µ–∫",
                Location = new Point(20, 120),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbMinDuration = new TrackBar()
            {
                Location = new Point(230, 115),
                Size = new Size(200, 45),
                Minimum = 1,
                Maximum = 30,
                Value = 5,
                TickFrequency = 2
            };
            tbMinDuration.ValueChanged += (s, e) => 
            {
                lblMinDuration.Text = $"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tbMinDuration.Value / 10.0:F1} —Å–µ–∫";
            };

            // Silence Timeout
            lblSilenceTimeout = new Label()
            {
                Text = "–¢–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã: 2.0 —Å–µ–∫",
                Location = new Point(20, 170),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbSilenceTimeout = new TrackBar()
            {
                Location = new Point(230, 165),
                Size = new Size(200, 45),
                Minimum = 5,
                Maximum = 100,
                Value = 20,
                TickFrequency = 5
            };
            tbSilenceTimeout.ValueChanged += (s, e) => 
            {
                lblSilenceTimeout.Text = $"–¢–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã: {tbSilenceTimeout.Value / 10.0:F1} —Å–µ–∫";
            };

            gbVADSettings.Controls.AddRange(new Control[] 
            { 
                cbEnableVAD,
                lblVADThreshold, tbVADThreshold,
                lblMinDuration, tbMinDuration,
                lblSilenceTimeout, tbSilenceTimeout
            });
            
            vadTab.Controls.Add(gbVADSettings);
            mainTabControl?.TabPages.Add(vadTab);
        }

        private void CreateTranslationTab()
        {
            TabPage translationTab = new TabPage("–ü–µ—Ä–µ–≤–æ–¥");
            
            gbTranslationSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞",
                Location = new Point(10, 10),
                Size = new Size(720, 300),
                ForeColor = Color.Black
            };

            // Translation Engine
            Label lblTranslationEngine = new Label()
            {
                Text = "–î–≤–∏–∂–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:",
                Location = new Point(20, 30),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbTranslationEngine = new ComboBox()
            {
                Location = new Point(150, 28),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbTranslationEngine.Items.AddRange(new string[] 
            { 
                "LibreTranslate (–ª–æ–∫–∞–ª—å–Ω—ã–π)", 
                "Google Translate API", 
                "DeepL API" 
            });
            cbTranslationEngine.SelectedIndex = 0;

            // API Keys info (using existing keys from main app)
            Label lblAPIInfo = new Label()
            {
                Text = "‚ÑπÔ∏è API –∫–ª—é—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                Location = new Point(20, 70),
                Size = new Size(450, 20),
                ForeColor = Color.DarkBlue,
                Font = new Font("Segoe UI", 9, FontStyle.Italic)
            };

            Button btnOpenMainSettings = new Button()
            {
                Text = "üìù –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API",
                Location = new Point(150, 100),
                Size = new Size(180, 30),
                ForeColor = Color.Black
            };
            btnOpenMainSettings.Click += (s, e) => OpenMainAPISettings();

            // LibreTranslate URL
            Label lblLibreTranslate = new Label()
            {
                Text = "LibreTranslate URL:",
                Location = new Point(20, 110),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbLibreTranslateURL = new TextBox()
            {
                Location = new Point(150, 108),
                Size = new Size(300, 25),
                Text = "http://localhost:5000"
            };

            // Source Language
            Label lblSourceLang = new Label()
            {
                Text = "–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫:",
                Location = new Point(20, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbSourceLanguage = new ComboBox()
            {
                Location = new Point(150, 148),
                Size = new Size(120, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbSourceLanguage.Items.AddRange(new string[] { "RU", "EN" });
            cbSourceLanguage.SelectedIndex = 0;

            // Target Language
            Label lblTargetLang = new Label()
            {
                Text = "–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫:",
                Location = new Point(290, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbTargetLanguage = new ComboBox()
            {
                Location = new Point(410, 148),
                Size = new Size(120, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbTargetLanguage.Items.AddRange(new string[] { "EN", "RU" });
            cbTargetLanguage.SelectedIndex = 0;

            btnTestTranslation = new Button()
            {
                Text = "–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞",
                Location = new Point(150, 190),
                Size = new Size(120, 30),
                ForeColor = Color.Black
            };
            btnTestTranslation.Click += BtnTestTranslation_Click;

            gbTranslationSettings.Controls.AddRange(new Control[] 
            { 
                lblTranslationEngine, cbTranslationEngine,
                lblAPIInfo, btnOpenMainSettings,
                lblLibreTranslate, tbLibreTranslateURL,
                lblSourceLang, cbSourceLanguage,
                lblTargetLang, cbTargetLanguage,
                btnTestTranslation
            });
            
            translationTab.Controls.Add(gbTranslationSettings);
            mainTabControl?.TabPages.Add(translationTab);
        }

        private void CreateMonitoringTab()
        {
            TabPage monitoringTab = new TabPage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
            
            gbMonitoring = new GroupBox()
            {
                Text = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                Location = new Point(10, 10),
                Size = new Size(720, 400),
                ForeColor = Color.Black
            };

            // Status
            lblStatus = new Label()
            {
                Text = "–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                Location = new Point(20, 30),
                Size = new Size(200, 20),
                ForeColor = Color.Red,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            lblLatency = new Label()
            {
                Text = "–ó–∞–¥–µ—Ä–∂–∫–∞: N/A",
                Location = new Point(240, 30),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            // Microphone Level
            Label lblMicLevel = new Label()
            {
                Text = "üé§ –£—Ä–æ–≤–µ–Ω—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:",
                Location = new Point(20, 70),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            pbMicLevel = new ProgressBar()
            {
                Location = new Point(180, 68),
                Size = new Size(200, 20),
                Style = ProgressBarStyle.Continuous
            };

            // Speaker Level
            Label lblSpeakerLevel = new Label()
            {
                Text = "üîä –£—Ä–æ–≤–µ–Ω—å –¥–∏–Ω–∞–º–∏–∫–æ–≤:",
                Location = new Point(20, 100),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            pbSpeakerLevel = new ProgressBar()
            {
                Location = new Point(180, 98),
                Size = new Size(200, 20),
                Style = ProgressBarStyle.Continuous
            };

            // Text monitoring
            Label lblIncoming = new Label()
            {
                Text = "–í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π):",
                Location = new Point(20, 140),
                Size = new Size(250, 20),
                ForeColor = Color.Black
            };

            tbIncomingText = new TextBox()
            {
                Location = new Point(20, 165),
                Size = new Size(680, 60),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.White,
                ForeColor = Color.DarkGreen
            };

            Label lblTranslated = new Label()
            {
                Text = "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:",
                Location = new Point(20, 240),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbTranslatedText = new TextBox()
            {
                Location = new Point(20, 265),
                Size = new Size(680, 60),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.White,
                ForeColor = Color.DarkBlue
            };

            gbMonitoring.Controls.AddRange(new Control[] 
            { 
                lblStatus, lblLatency,
                lblMicLevel, pbMicLevel,
                lblSpeakerLevel, pbSpeakerLevel,
                lblIncoming, tbIncomingText,
                lblTranslated, tbTranslatedText
            });
            
            monitoringTab.Controls.Add(gbMonitoring);
            mainTabControl?.TabPages.Add(monitoringTab);
        }

        private void CreateControlButtons()
        {
            // Start/Stop controls
            btnStart = new Button()
            {
                Text = "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç",
                Location = new Point(10, 520),
                Size = new Size(80, 35),
                ForeColor = Color.Black,
                BackColor = Color.LightGreen
            };

            btnStop = new Button()
            {
                Text = "‚èπÔ∏è –°—Ç–æ–ø",
                Location = new Point(100, 520),
                Size = new Size(80, 35),
                ForeColor = Color.Black,
                BackColor = Color.LightCoral,
                Enabled = false
            };

            btnPause = new Button()
            {
                Text = "‚è∏Ô∏è –ü–∞—É–∑–∞",
                Location = new Point(190, 520),
                Size = new Size(80, 35),
                ForeColor = Color.Black,
                BackColor = Color.LightYellow,
                Enabled = false
            };

            // Dialog buttons
            btnOK = new Button()
            {
                Text = "OK",
                Location = new Point(550, 520),
                Size = new Size(80, 35),
                DialogResult = DialogResult.OK,
                ForeColor = Color.Black
            };

            btnCancel = new Button()
            {
                Text = "–û—Ç–º–µ–Ω–∞",
                Location = new Point(640, 520),
                Size = new Size(80, 35),
                DialogResult = DialogResult.Cancel,
                ForeColor = Color.Black
            };

            btnApply = new Button()
            {
                Text = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                Location = new Point(450, 520),
                Size = new Size(90, 35),
                ForeColor = Color.Black
            };

            // Event handlers
            btnStart.Click += BtnStart_Click;
            btnStop.Click += BtnStop_Click;
            btnPause.Click += BtnPause_Click;
            btnApply.Click += BtnApply_Click;
            btnOK.Click += BtnOK_Click;

            this.Controls.AddRange(new Control[] 
            { 
                btnStart, btnStop, btnPause, 
                btnOK, btnCancel, btnApply 
            });
        }

        #region Event Handlers

        private void OpenMainAPISettings()
        {
            try
            {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                MessageBox.Show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'.\n\n" +
                              "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏:\n" +
                              "‚Ä¢ Google Translate API\n" +
                              "‚Ä¢ DeepL API\n" +
                              "‚Ä¢ Gemini API\n" +
                              "‚Ä¢ Naver API\n" +
                              "‚Ä¢ LibreTranslate (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
                              "API –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                              MessageBoxButtons.OK, 
                              MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnStart_Click(object? sender, EventArgs e)
        {
            // Start AutoVoiceTranslator
            if (btnStart != null) btnStart.Enabled = false;
            if (btnStop != null) btnStop.Enabled = true;
            if (btnPause != null) btnPause.Enabled = true;
            if (lblStatus != null)
            {
                lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω";
                lblStatus.ForeColor = Color.LightGreen;
            }
            
            // TODO: Implement start logic
        }

        private void BtnStop_Click(object? sender, EventArgs e)
        {
            // Stop AutoVoiceTranslator
            if (btnStart != null) btnStart.Enabled = true;
            if (btnStop != null) btnStop.Enabled = false;
            if (btnPause != null) btnPause.Enabled = false;
            if (lblStatus != null)
            {
                lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                lblStatus.ForeColor = Color.Red;
            }
            
            // TODO: Implement stop logic
        }

        private void BtnPause_Click(object? sender, EventArgs e)
        {
            // Toggle pause
            if (btnPause?.Text.Contains("–ü–∞—É–∑–∞") == true)
            {
                btnPause.Text = "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å";
                if (lblStatus != null)
                {
                    lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞";
                    lblStatus.ForeColor = Color.Yellow;
                }
            }
            else
            {
                if (btnPause != null) btnPause.Text = "‚è∏Ô∏è –ü–∞—É–∑–∞";
                if (lblStatus != null)
                {
                    lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω";
                    lblStatus.ForeColor = Color.LightGreen;
                }
            }
            
            // TODO: Implement pause logic
        }

        private void BtnApply_Click(object? sender, EventArgs e)
        {
            // Apply settings
            SaveSettings();
            MessageBox.Show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void BtnOK_Click(object? sender, EventArgs e)
        {
            // Save and close
            SaveSettings();
            this.Close();
        }

        private void BtnTestTranslation_Click(object? sender, EventArgs e)
        {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            TranslationTestForm testForm = new TranslationTestForm();
            testForm.ShowDialog();
        }

        private void BtnTestMicrophone_Click(object? sender, EventArgs e)
        {
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            MessageBox.Show("–ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞—Ç–∞!", "–û—Ç–ª–∞–¥–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            if (sender is Button btn)
            {
                MessageBox.Show($"–ö–Ω–æ–ø–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Visible={btn.Visible}, Enabled={btn.Enabled}, Text='{btn.Text}'", "–û—Ç–ª–∞–¥–∫–∞ –∫–Ω–æ–ø–∫–∏");
            }
            
            try
            {
                if (cbMicrophone?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string deviceName = cbMicrophone?.SelectedItem?.ToString() ?? "";
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º NAudio –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                int deviceIndex = GetActualDeviceIndex(cbMicrophone?.SelectedIndex ?? 0, deviceName, true);
                
                using (var waveIn = new WaveInEvent())
                {
                    waveIn.DeviceNumber = deviceIndex;
                    waveIn.WaveFormat = new WaveFormat(44100, 1); // 44.1kHz, mono
                    
                    // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
                    var bufferedWaveProvider = new BufferedWaveProvider(waveIn.WaveFormat);
                    bool recordingStarted = false;
                    
                    waveIn.DataAvailable += (s, args) =>
                    {
                        if (!recordingStarted)
                        {
                            recordingStarted = true;
                            this.Invoke(() => {
                                MessageBox.Show($"–ú–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceName}' —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ—Å–∏–≥–Ω–∞–ª.", 
                                    "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            });
                        }
                        bufferedWaveProvider.AddSamples(args.Buffer, 0, args.BytesRecorded);
                    };
                    
                    waveIn.StartRecording();
                    
                    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    System.Threading.Thread.Sleep(2000);
                    
                    waveIn.StopRecording();
                    
                    if (!recordingStarted)
                    {
                        MessageBox.Show($"–ú–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceName}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏.", 
                            "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                
                Util.ShowLog($"Microphone test completed: {deviceName}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}", 
                    "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Util.ShowLog($"Microphone test error: {ex}");
            }
        }

        private void BtnTestSpeakers_Click(object? sender, EventArgs e)
        {
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            MessageBox.Show("–ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤ –Ω–∞–∂–∞—Ç–∞!", "–û—Ç–ª–∞–¥–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            try
            {
                if (cbSpeakers?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string deviceName = cbSpeakers?.SelectedItem?.ToString() ?? "";
                int deviceIndex = GetActualDeviceIndex(cbSpeakers?.SelectedIndex ?? 0, deviceName, false);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ (—Å–∏–Ω—É—Å–æ–∏–¥–∞ 440 Hz –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É)
                int sampleRate = 44100;
                int duration = 1; // —Å–µ–∫—É–Ω–¥–∞
                int samples = sampleRate * duration;
                
                float[] testSignal = new float[samples];
                for (int i = 0; i < samples; i++)
                {
                    testSignal[i] = (float)(Math.Sin(2 * Math.PI * 440 * i / sampleRate) * 0.3); // 440 Hz, 30% –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                }
                
                using (var waveOut = new WaveOutEvent())
                {
                    waveOut.DeviceNumber = deviceIndex;
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ 16-bit PCM
                    var waveFormat = new WaveFormat(sampleRate, 16, 1);
                    var buffer = new byte[samples * 2];
                    
                    for (int i = 0; i < samples; i++)
                    {
                        short sample = (short)(testSignal[i] * short.MaxValue);
                        buffer[i * 2] = (byte)(sample & 0xFF);
                        buffer[i * 2 + 1] = (byte)((sample >> 8) & 0xFF);
                    }
                    
                    var memoryStream = new MemoryStream(buffer);
                    var rawSourceWaveStream = new RawSourceWaveStream(memoryStream, waveFormat);
                    
                    waveOut.Init(rawSourceWaveStream);
                    waveOut.Play();
                    
                    MessageBox.Show($"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ '{deviceName}'.\n–í—ã –¥–æ–ª–∂–Ω—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–æ–Ω 440 Hz.", 
                        "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    
                    while (waveOut.PlaybackState == PlaybackState.Playing)
                    {
                        System.Threading.Thread.Sleep(100);
                    }
                }
                
                Util.ShowLog($"Speaker test completed: {deviceName}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: {ex.Message}", 
                    "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Util.ShowLog($"Speaker test error: {ex}");
            }
        }

        private void BtnTestVBCable_Click(object? sender, EventArgs e)
        {
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            MessageBox.Show("–ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç VB-Cable –Ω–∞–∂–∞—Ç–∞!", "–û—Ç–ª–∞–¥–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            try
            {
                if (cbVBCable?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string deviceName = cbVBCable?.SelectedItem?.ToString() ?? "";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                bool foundVBCableInput = false;
                bool foundVBCableOutput = false;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ (CABLE Output)
                using (var deviceEnumerator = new MMDeviceEnumerator())
                {
                    var captureDevices = deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                    foreach (var device in captureDevices)
                    {
                        if (device.FriendlyName.ToLower().Contains("cable"))
                        {
                            foundVBCableOutput = true;
                            break;
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (CABLE Input)
                    var renderDevices = deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                    foreach (var device in renderDevices)
                    {
                        if (device.FriendlyName.ToLower().Contains("cable"))
                        {
                            foundVBCableInput = true;
                            break;
                        }
                    }
                }
                
                string testResult = $"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VB-Cable:\n\n";
                testResult += $"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {deviceName}\n";
                testResult += $"CABLE Input (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ): {(foundVBCableInput ? "‚úì –ù–∞–π–¥–µ–Ω" : "‚úó –ù–µ –Ω–∞–π–¥–µ–Ω")}\n";
                testResult += $"CABLE Output (–∑–∞–ø–∏—Å—å): {(foundVBCableOutput ? "‚úì –ù–∞–π–¥–µ–Ω" : "‚úó –ù–µ –Ω–∞–π–¥–µ–Ω")}\n\n";
                
                if (foundVBCableInput && foundVBCableOutput)
                {
                    testResult += "‚úì VB-Cable –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!";
                    MessageBox.Show(testResult, "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    testResult += "‚ö† VB-Cable –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n";
                    testResult += "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VB-Audio Virtual Cable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω.";
                    MessageBox.Show(testResult, "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                
                Util.ShowLog($"VB-Cable test completed: Input={foundVBCableInput}, Output={foundVBCableOutput}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VB-Cable: {ex.Message}", 
                    "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Util.ShowLog($"VB-Cable test error: {ex}");
            }
        }

        #endregion

        #region Settings Management

        private void LoadSettings()
        {
            try
            {
                // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                string settingsPath = "AutoVoiceTranslator_Settings.ini";
                if (!File.Exists(settingsPath))
                {
                    SaveDefaultSettings();
                    return;
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
                string[] lines = File.ReadAllLines(settingsPath);
                foreach (string line in lines)
                {
                    if (line.Contains("="))
                    {
                        string[] parts = line.Split('=');
                        if (parts.Length == 2)
                        {
                            string key = parts[0].Trim();
                            string value = parts[1].Trim();
                            
                            ApplySetting(key, value);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void SaveSettings()
        {
            try
            {
                string settingsPath = "AutoVoiceTranslator_Settings.ini";
                using (StreamWriter writer = new StreamWriter(settingsPath))
                {
                    writer.WriteLine("[AutoVoiceTranslator Settings]");
                    writer.WriteLine($"WorkMode={GetSelectedWorkMode()}");
                    
                    // STT Settings
                    writer.WriteLine($"STTEngine={cbSTTEngine?.SelectedIndex ?? 0}");
                    writer.WriteLine($"WhisperModel={cbWhisperModel?.SelectedIndex ?? 2}");
                    writer.WriteLine($"VoskModel={cbVoskModel?.SelectedIndex ?? 0}");
                    writer.WriteLine($"STTSensitivity={tbSTTSensitivity?.Value ?? 50}");
                    
                    // TTS Settings
                    writer.WriteLine($"TTSEngine={cbTTSEngine?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TTSVoiceRU={cbTTSVoiceRU?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TTSVoiceEN={cbTTSVoiceEN?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TTSSpeedRU={tbTTSSpeedRU?.Value ?? 100}");
                    writer.WriteLine($"TTSSpeedEN={tbTTSSpeedEN?.Value ?? 100}");
                    writer.WriteLine($"TTSVolumeRU={tbTTSVolumeRU?.Value ?? 100}");
                    writer.WriteLine($"TTSVolumeEN={tbTTSVolumeEN?.Value ?? 100}");
                    
                    // Audio Devices
                    writer.WriteLine($"Microphone={cbMicrophone?.SelectedIndex ?? 0}");
                    writer.WriteLine($"Speakers={cbSpeakers?.SelectedIndex ?? 0}");
                    writer.WriteLine($"Headphones={cbHeadphones?.SelectedIndex ?? 0}");
                    writer.WriteLine($"VBCable={cbVBCable?.SelectedIndex ?? 0}");
                    
                    // VAD Settings
                    writer.WriteLine($"EnableVAD={cbEnableVAD?.Checked ?? true}");
                    writer.WriteLine($"VADThreshold={tbVADThreshold?.Value ?? 50}");
                    writer.WriteLine($"MinDuration={tbMinDuration?.Value ?? 5}");
                    writer.WriteLine($"SilenceTimeout={tbSilenceTimeout?.Value ?? 20}");
                    
                    // Translation Settings
                    writer.WriteLine($"TranslationEngine={cbTranslationEngine?.SelectedIndex ?? 0}");
                    writer.WriteLine($"LibreTranslateURL={tbLibreTranslateURL?.Text ?? "http://localhost:5000"}");
                    writer.WriteLine($"SourceLanguage={cbSourceLanguage?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TargetLanguage={cbTargetLanguage?.SelectedIndex ?? 0}");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void SaveDefaultSettings()
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            SaveSettings();
        }

        private string GetSelectedWorkMode()
        {
            if (rbModeOff?.Checked == true) return "Off";
            if (rbModeIncoming?.Checked == true) return "Incoming";
            if (rbModeOutgoing?.Checked == true) return "Outgoing";
            if (rbModeBidirectional?.Checked == true) return "Bidirectional";
            return "Off";
        }

        private void ApplySetting(string key, string value)
        {
            try
            {
                switch (key)
                {
                    case "WorkMode":
                        SetWorkMode(value);
                        break;
                    case "STTEngine":
                        if (cbSTTEngine != null && int.TryParse(value, out int sttEngine))
                            cbSTTEngine.SelectedIndex = Math.Max(0, Math.Min(sttEngine, cbSTTEngine.Items.Count - 1));
                        break;
                    case "WhisperModel":
                        if (cbWhisperModel != null && int.TryParse(value, out int whisperModel))
                            cbWhisperModel.SelectedIndex = Math.Max(0, Math.Min(whisperModel, cbWhisperModel.Items.Count - 1));
                        break;
                    case "VoskModel":
                        if (cbVoskModel != null && int.TryParse(value, out int voskModel))
                            cbVoskModel.SelectedIndex = Math.Max(0, Math.Min(voskModel, cbVoskModel.Items.Count - 1));
                        break;
                    case "STTSensitivity":
                        if (tbSTTSensitivity != null && int.TryParse(value, out int sttSens))
                            tbSTTSensitivity.Value = Math.Max(0, Math.Min(sttSens, 100));
                        break;
                    case "TTSEngine":
                        if (cbTTSEngine != null && int.TryParse(value, out int ttsEngine))
                            cbTTSEngine.SelectedIndex = Math.Max(0, Math.Min(ttsEngine, cbTTSEngine.Items.Count - 1));
                        break;
                    case "TTSVoiceRU":
                        if (cbTTSVoiceRU != null && int.TryParse(value, out int ttsVoiceRU))
                            cbTTSVoiceRU.SelectedIndex = Math.Max(0, Math.Min(ttsVoiceRU, cbTTSVoiceRU.Items.Count - 1));
                        break;
                    case "TTSVoiceEN":
                        if (cbTTSVoiceEN != null && int.TryParse(value, out int ttsVoiceEN))
                            cbTTSVoiceEN.SelectedIndex = Math.Max(0, Math.Min(ttsVoiceEN, cbTTSVoiceEN.Items.Count - 1));
                        break;
                    case "TTSSpeedRU":
                        if (tbTTSSpeedRU != null && int.TryParse(value, out int speedRU))
                            tbTTSSpeedRU.Value = Math.Max(10, Math.Min(speedRU, 200));
                        break;
                    case "TTSSpeedEN":
                        if (tbTTSSpeedEN != null && int.TryParse(value, out int speedEN))
                            tbTTSSpeedEN.Value = Math.Max(10, Math.Min(speedEN, 200));
                        break;
                    case "TTSVolumeRU":
                        if (tbTTSVolumeRU != null && int.TryParse(value, out int volumeRU))
                            tbTTSVolumeRU.Value = Math.Max(0, Math.Min(volumeRU, 100));
                        break;
                    case "TTSVolumeEN":
                        if (tbTTSVolumeEN != null && int.TryParse(value, out int volumeEN))
                            tbTTSVolumeEN.Value = Math.Max(0, Math.Min(volumeEN, 100));
                        break;
                    case "Microphone":
                        if (cbMicrophone != null && int.TryParse(value, out int mic))
                            cbMicrophone.SelectedIndex = Math.Max(0, Math.Min(mic, cbMicrophone.Items.Count - 1));
                        break;
                    case "Speakers":
                        if (cbSpeakers != null && int.TryParse(value, out int speakers))
                            cbSpeakers.SelectedIndex = Math.Max(0, Math.Min(speakers, cbSpeakers.Items.Count - 1));
                        break;
                    case "Headphones":
                        if (cbHeadphones != null && int.TryParse(value, out int headphones))
                            cbHeadphones.SelectedIndex = Math.Max(0, Math.Min(headphones, cbHeadphones.Items.Count - 1));
                        break;
                    case "VBCable":
                        if (cbVBCable != null && int.TryParse(value, out int vbcable))
                            cbVBCable.SelectedIndex = Math.Max(0, Math.Min(vbcable, cbVBCable.Items.Count - 1));
                        break;
                    case "EnableVAD":
                        if (cbEnableVAD != null && bool.TryParse(value, out bool enableVAD))
                            cbEnableVAD.Checked = enableVAD;
                        break;
                    case "VADThreshold":
                        if (tbVADThreshold != null && int.TryParse(value, out int vadThreshold))
                            tbVADThreshold.Value = Math.Max(10, Math.Min(vadThreshold, 95));
                        break;
                    case "MinDuration":
                        if (tbMinDuration != null && int.TryParse(value, out int minDuration))
                            tbMinDuration.Value = Math.Max(1, Math.Min(minDuration, 30));
                        break;
                    case "SilenceTimeout":
                        if (tbSilenceTimeout != null && int.TryParse(value, out int silenceTimeout))
                            tbSilenceTimeout.Value = Math.Max(5, Math.Min(silenceTimeout, 100));
                        break;
                    case "TranslationEngine":
                        if (cbTranslationEngine != null && int.TryParse(value, out int transEngine))
                            cbTranslationEngine.SelectedIndex = Math.Max(0, Math.Min(transEngine, cbTranslationEngine.Items.Count - 1));
                        break;
                    case "LibreTranslateURL":
                        if (tbLibreTranslateURL != null)
                            tbLibreTranslateURL.Text = value;
                        break;
                    case "SourceLanguage":
                        if (cbSourceLanguage != null && int.TryParse(value, out int sourceLang))
                            cbSourceLanguage.SelectedIndex = Math.Max(0, Math.Min(sourceLang, cbSourceLanguage.Items.Count - 1));
                        break;
                    case "TargetLanguage":
                        if (cbTargetLanguage != null && int.TryParse(value, out int targetLang))
                            cbTargetLanguage.SelectedIndex = Math.Max(0, Math.Min(targetLang, cbTargetLanguage.Items.Count - 1));
                        break;
                }
            }
            catch (Exception ex)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                System.Diagnostics.Debug.WriteLine($"Error applying setting {key}={value}: {ex.Message}");
            }
        }

        private void SetWorkMode(string mode)
        {
            switch (mode)
            {
                case "Off":
                    if (rbModeOff != null) rbModeOff.Checked = true;
                    break;
                case "Incoming":
                    if (rbModeIncoming != null) rbModeIncoming.Checked = true;
                    break;
                case "Outgoing":
                    if (rbModeOutgoing != null) rbModeOutgoing.Checked = true;
                    break;
                case "Bidirectional":
                    if (rbModeBidirectional != null) rbModeBidirectional.Checked = true;
                    break;
                default:
                    if (rbModeOff != null) rbModeOff.Checked = true;
                    break;
            }
        }

        #endregion

        private void LoadAudioDevices()
        {
            // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            string logPath = Path.Combine(Environment.CurrentDirectory, "audio_debug.log");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ UI-–ø–æ—Ç–æ–∫–µ
                bool isUIThread = !this.InvokeRequired;
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] LoadAudioDevices() started in UI thread: {isUIThread}\n");
                
                // –ï—Å–ª–∏ –Ω–µ –≤ UI-–ø–æ—Ç–æ–∫–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Invoke
                if (this.InvokeRequired)
                {
                    this.Invoke(new Action(LoadAudioDevices));
                    return;
                }
                
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                System.Diagnostics.Debug.WriteLine("LoadAudioDevices() started");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] LoadAudioDevices() started\n");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ComboBox-—ã –Ω–µ —Ä–∞–≤–Ω—ã null
                System.Diagnostics.Debug.WriteLine($"ComboBox states - Microphone: {cbMicrophone != null}, Speakers: {cbSpeakers != null}, Headphones: {cbHeadphones != null}, VBCable: {cbVBCable != null}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ComboBox states - Microphone: {cbMicrophone != null}, Speakers: {cbSpeakers != null}, Headphones: {cbHeadphones != null}, VBCable: {cbVBCable != null}\n");
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ ComboBox
                cbMicrophone?.Items.Clear();
                cbSpeakers?.Items.Clear();
                cbHeadphones?.Items.Clear();
                cbVBCable?.Items.Clear();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
                int waveInCount = WaveIn.DeviceCount;
                System.Diagnostics.Debug.WriteLine($"WaveIn.DeviceCount = {waveInCount}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] WaveIn.DeviceCount = {waveInCount}\n");
                
                for (int i = 0; i < waveInCount; i++)
                {
                    var deviceInfo = WaveIn.GetCapabilities(i);
                    string deviceName = $"{deviceInfo.ProductName} (ID:{i})";
                    System.Diagnostics.Debug.WriteLine($"Adding WaveIn device: {deviceName}");
                    File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Adding WaveIn device: {deviceName}\n");
                    cbMicrophone?.Items.Add(deviceName);
                    cbVBCable?.Items.Add(deviceName);
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–∏–Ω–∞–º–∏–∫–∏/–Ω–∞—É—à–Ω–∏–∫–∏)
                int waveOutCount = WaveOut.DeviceCount;
                System.Diagnostics.Debug.WriteLine($"WaveOut.DeviceCount = {waveOutCount}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] WaveOut.DeviceCount = {waveOutCount}\n");
                
                for (int i = 0; i < waveOutCount; i++)
                {
                    var deviceInfo = WaveOut.GetCapabilities(i);
                    string deviceName = $"{deviceInfo.ProductName} (ID:{i})";
                    System.Diagnostics.Debug.WriteLine($"Adding WaveOut device: {deviceName}");
                    File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Adding WaveOut device: {deviceName}\n");
                    cbSpeakers?.Items.Add(deviceName);
                    cbHeadphones?.Items.Add(deviceName);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                System.Diagnostics.Debug.WriteLine("Adding default devices");
                cbMicrophone?.Items.Insert(0, "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbSpeakers?.Items.Insert(0, "–î–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbHeadphones?.Items.Insert(0, "–ù–∞—É—à–Ω–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbVBCable?.Items.Insert(0, "VB-Cable –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                System.Diagnostics.Debug.WriteLine("Setting default selections");
                if (cbMicrophone?.Items.Count > 0) cbMicrophone.SelectedIndex = 0;
                if (cbSpeakers?.Items.Count > 0) cbSpeakers.SelectedIndex = 0;
                if (cbHeadphones?.Items.Count > 0) cbHeadphones.SelectedIndex = 0;
                if (cbVBCable?.Items.Count > 0) cbVBCable.SelectedIndex = 0;
                
                System.Diagnostics.Debug.WriteLine($"Final counts - Microphone: {cbMicrophone?.Items.Count}, Speakers: {cbSpeakers?.Items.Count}, Headphones: {cbHeadphones?.Items.Count}, VBCable: {cbVBCable?.Items.Count}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Final counts - Microphone: {cbMicrophone?.Items.Count}, Speakers: {cbSpeakers?.Items.Count}, Headphones: {cbHeadphones?.Items.Count}, VBCable: {cbVBCable?.Items.Count}\n");
                System.Diagnostics.Debug.WriteLine("LoadAudioDevices() completed successfully");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] LoadAudioDevices() completed successfully\n");
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                cbMicrophone?.Refresh();
                cbSpeakers?.Refresh();
                cbHeadphones?.Refresh();
                cbVBCable?.Refresh();
                this.Refresh();
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] UI refresh completed\n");

                // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å WASAPI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API)
                try
                {
                    using (var enumerator = new MMDeviceEnumerator())
                    {
                        // –í—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        var inputDevices = enumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                        foreach (var device in inputDevices)
                        {
                            string deviceName = $"{device.FriendlyName} (WASAPI)";
                            if (cbMicrophone != null && !cbMicrophone.Items.Contains(deviceName))
                                cbMicrophone.Items.Add(deviceName);
                            if (cbVBCable != null && !cbVBCable.Items.Contains(deviceName))
                                cbVBCable.Items.Add(deviceName);
                        }

                        // –í—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        var outputDevices = enumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                        foreach (var device in outputDevices)
                        {
                            string deviceName = $"{device.FriendlyName} (WASAPI)";
                            if (cbSpeakers != null && !cbSpeakers.Items.Contains(deviceName))
                                cbSpeakers.Items.Add(deviceName);
                            if (cbHeadphones != null && !cbHeadphones.Items.Contains(deviceName))
                                cbHeadphones.Items.Add(deviceName);
                        }
                    }
                }
                catch (Exception ex)
                {
                    // WASAPI –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
                    System.Diagnostics.Debug.WriteLine($"WASAPI enumeration failed: {ex.Message}");
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (cbMicrophone?.Items.Count > 0) cbMicrophone.SelectedIndex = 0;
                if (cbSpeakers?.Items.Count > 0) cbSpeakers.SelectedIndex = 0;
                if (cbHeadphones?.Items.Count > 0) cbHeadphones.SelectedIndex = 0;
                if (cbVBCable?.Items.Count > 0) cbVBCable.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                string logFilePath = Path.Combine(Environment.CurrentDirectory, "audio_debug.log");
                System.Diagnostics.Debug.WriteLine($"Exception in LoadAudioDevices: {ex.Message}");
                File.AppendAllText(logFilePath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Exception in LoadAudioDevices: {ex.Message}\n");
                File.AppendAllText(logFilePath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Stack trace: {ex.StackTrace}\n");
                
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                cbMicrophone?.Items.Add("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbSpeakers?.Items.Add("–î–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbHeadphones?.Items.Add("–ù–∞—É—à–Ω–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbVBCable?.Items.Add("VB-Cable");
                
                if (cbMicrophone?.Items.Count > 0) cbMicrophone.SelectedIndex = 0;
                if (cbSpeakers?.Items.Count > 0) cbSpeakers.SelectedIndex = 0;
                if (cbHeadphones?.Items.Count > 0) cbHeadphones.SelectedIndex = 0;
                if (cbVBCable?.Items.Count > 0) cbVBCable.SelectedIndex = 0;
            }
        }

        private void OnClick_TestAllAudioDevices(object? sender, EventArgs e)
        {
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                TestAudioDevices.TestDeviceEnumeration();
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                string message = TestAudioDevices.GetDeviceEnumerationResults();
                MessageBox.Show(message, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                LoadAudioDevices();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        #region Audio Device Testing Methods
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å NAudio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–º–±–æ–±–æ–∫—Å–∞
        /// </summary>
        /// <param name="comboBoxIndex">–ò–Ω–¥–µ–∫—Å –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ</param>
        /// <param name="selectedText">–¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</param>
        /// <param name="isInputDevice">true –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã), false –¥–ª—è –≤—ã–≤–æ–¥–∞</param>
        /// <returns>–†–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å NAudio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ -1 –µ—Å–ª–∏ –æ—à–∏–±–∫–∞</returns>
        private int GetActualDeviceIndex(int comboBoxIndex, string selectedText, bool isInputDevice)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"GetActualDeviceIndex: comboBoxIndex={comboBoxIndex}, selectedText='{selectedText}', isInputDevice={isInputDevice}");
                
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
                if (comboBoxIndex == 0 && selectedText.Contains("–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"))
                {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å -1 –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (NAudio –∏—Å–ø–æ–ª—å–∑—É–µ—Ç -1 –¥–ª—è default device)
                    System.Diagnostics.Debug.WriteLine("Returning -1 for default device");
                    return -1;
                }
                
                // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ç–µ–∫—Å—Ç–µ –≤–∏–¥–∞ "(ID:X)"
                var match = System.Text.RegularExpressions.Regex.Match(selectedText, @"\(ID:(\d+)\)");
                if (match.Success && int.TryParse(match.Groups[1].Value, out int realIndex))
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    int maxCount = isInputDevice ? WaveIn.DeviceCount : WaveOut.DeviceCount;
                    if (realIndex >= 0 && realIndex < maxCount)
                    {
                        System.Diagnostics.Debug.WriteLine($"Found ID in text: {realIndex}");
                        return realIndex;
                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine($"ID {realIndex} is out of range (0-{maxCount-1})");
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω–¥–µ–∫—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å
                // –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", –ø–æ—ç—Ç–æ–º—É –≤—ã—á–∏—Ç–∞–µ–º 1
                int calculatedIndex = comboBoxIndex - 1;
                int deviceCount = isInputDevice ? WaveIn.DeviceCount : WaveOut.DeviceCount;
                
                System.Diagnostics.Debug.WriteLine($"Calculated index: {calculatedIndex}, device count: {deviceCount}");
                
                if (calculatedIndex >= 0 && calculatedIndex < deviceCount)
                {
                    System.Diagnostics.Debug.WriteLine($"Using calculated index: {calculatedIndex}");
                    return calculatedIndex;
                }
                
                System.Diagnostics.Debug.WriteLine("Failed to determine device index");
                return -1; // –û—à–∏–±–∫–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in GetActualDeviceIndex: {ex.Message}");
                return -1;
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        /// </summary>
        private async Task TestMicrophoneDevice()
        {
            try
            {
                if (cbMicrophone?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                int deviceIndex = GetActualDeviceIndex(cbMicrophone!.SelectedIndex, cbMicrophone.SelectedItem?.ToString() ?? "", true);
                string selectedDeviceName = cbMicrophone.SelectedItem?.ToString() ?? "";
                
                System.Diagnostics.Debug.WriteLine($"TestMicrophoneDevice: selectedIndex={cbMicrophone.SelectedIndex}, deviceIndex={deviceIndex}, selectedText='{selectedDeviceName}'");
                
                string deviceDisplayName;
                if (deviceIndex == -1)
                {
                    deviceDisplayName = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é";
                }
                else
                {
                    if (deviceIndex < 0 || deviceIndex >= WaveIn.DeviceCount)
                    {
                        MessageBox.Show($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceIndex}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: 0-{WaveIn.DeviceCount - 1}", 
                            "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    
                    var deviceCaps = WaveIn.GetCapabilities(deviceIndex);
                    deviceDisplayName = deviceCaps.ProductName;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º (—Ç–æ–ª—å–∫–æ VB-Cable, –ù–ï Voicemeeter)
                bool isVirtualDevice = (selectedDeviceName.Contains("CABLE") || 
                                      selectedDeviceName.Contains("VB-Audio")) &&
                                      !selectedDeviceName.Contains("Voicemeeter") &&
                                      !selectedDeviceName.Contains("VoiceMeeter");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                string message;
                if (isVirtualDevice)
                {
                    message = $"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:\n{deviceDisplayName}\n\n" +
                             "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥, " +
                             "–∑–∞—Ç–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.\n\n" +
                             "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –û–ö.";
                }
                else
                {
                    message = $"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:\n{deviceDisplayName}\n\n" +
                             "–ë—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥.\n" +
                             "–í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ —Å–ª—ã—à–∞—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫–∞—Ö!\n\n" +
                             "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –û–ö.";
                }
                                
                if (MessageBox.Show(message, "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information) == DialogResult.Cancel)
                {
                    return;
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                bool success;
                if (isVirtualDevice)
                {
                    // –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ VB-Cable) –∏—Å–ø–æ–ª—å–∑—É–µ–º playback –º–µ—Ç–æ–¥
                    success = await audioTester!.TestMicrophoneWithPlaybackAsync(deviceIndex, -1, 3);
                }
                else
                {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–Ω–æ–º
                    int speakerDeviceIndex = -1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    if (cbSpeakers?.SelectedIndex >= 0 && cbSpeakers?.SelectedItem != null)
                    {
                        speakerDeviceIndex = GetActualDeviceIndex(cbSpeakers.SelectedIndex, cbSpeakers.SelectedItem.ToString() ?? "", false);
                        System.Diagnostics.Debug.WriteLine($"Using speakers device index: {speakerDeviceIndex} ({cbSpeakers.SelectedItem})");
                    }
                    else if (cbHeadphones?.SelectedIndex >= 0 && cbHeadphones?.SelectedItem != null)
                    {
                        speakerDeviceIndex = GetActualDeviceIndex(cbHeadphones.SelectedIndex, cbHeadphones.SelectedItem.ToString() ?? "", false);
                        System.Diagnostics.Debug.WriteLine($"Using headphones device index: {speakerDeviceIndex} ({cbHeadphones.SelectedItem})");
                    }
                    
                    // –°–ù–ê–ß–ê–õ–ê —Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–Ω–æ–º
                    if (MessageBox.Show($"–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É –¥–∏–Ω–∞–º–∏–∫–æ–≤.\n\n–í—ã –¥–æ–ª–∂–Ω—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
                        "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        bool speakerTest = await audioTester!.TestSpeakersAsync(speakerDeviceIndex, 1000, 2);
                        if (!speakerTest)
                        {
                            MessageBox.Show("‚ùå –î–∏–Ω–∞–º–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n- –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n- –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤ Windows\n- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤", 
                                "–û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                        
                        MessageBox.Show("‚úÖ –î–∏–Ω–∞–º–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω.", 
                            "–î–∏–Ω–∞–º–∏–∫–∏ OK", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    
                    System.Diagnostics.Debug.WriteLine($"Testing microphone {deviceIndex} with speaker {speakerDeviceIndex}");
                    success = await audioTester!.TestMicrophoneWithRealTimeMonitoringAsync(deviceIndex, speakerDeviceIndex, 3);
                }
                
                if (success)
                {
                    if (isVirtualDevice)
                    {
                        MessageBox.Show($"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceDisplayName}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                       "–ï—Å–ª–∏ –≤—ã —Å–ª—ã—à–∞–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏, " +
                                       "VB-Cable –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞.", 
                                       "–¢–µ—Å—Ç VB-Cable —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show($"‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceDisplayName}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                       "–ï—Å–ª–∏ –≤—ã —Å–ª—ã—à–∞–ª–∏ —Å–≤–æ–π –≥–æ–ª–æ—Å –≤ –¥–∏–Ω–∞–º–∏–∫–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, " +
                                       "–º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", 
                                       "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    string errorMessage = isVirtualDevice ? 
                        $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VB-Cable '{deviceDisplayName}'.\n\n" +
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É VB-Cable –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ –¥—Ä–∞–π–≤–µ—Ä–∞." :
                        $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ '{deviceDisplayName}'.\n\n" +
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.";
                        
                    MessageBox.Show(errorMessage, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫–æ–≤
        /// </summary>
        private async Task TestSpeakersDevice()
        {
            try
            {
                if (cbSpeakers?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–î–∏–Ω–∞–º–∏–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                int deviceIndex = GetActualDeviceIndex(cbSpeakers!.SelectedIndex, cbSpeakers.SelectedItem?.ToString() ?? "", false);
                string selectedDeviceName = cbSpeakers.SelectedItem?.ToString() ?? "";
                
                System.Diagnostics.Debug.WriteLine($"TestSpeakersDevice: selectedIndex={cbSpeakers.SelectedIndex}, deviceIndex={deviceIndex}, selectedText='{selectedDeviceName}'");
                
                string deviceDisplayName;
                if (deviceIndex == -1)
                {
                    deviceDisplayName = "–î–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é";
                }
                else
                {
                    if (deviceIndex < 0 || deviceIndex >= WaveOut.DeviceCount)
                    {
                        MessageBox.Show($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceIndex}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: 0-{WaveOut.DeviceCount - 1}", 
                            "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    
                    var deviceCaps = WaveOut.GetCapabilities(deviceIndex);
                    deviceDisplayName = deviceCaps.ProductName;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                string message = $"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤:\n{deviceDisplayName}\n\n" +
                                "–ë—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω 440Hz –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥.\n\n" +
                                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.";
                                
                if (MessageBox.Show(message, "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information) == DialogResult.Cancel)
                {
                    return;
                }
                
                bool success = await audioTester!.TestSpeakersAsync(deviceIndex, 440.0f, 3);
                
                if (success)
                {
                    MessageBox.Show($"‚úÖ –î–∏–Ω–∞–º–∏–∫–∏ '{deviceDisplayName}' —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                   "–ï—Å–ª–∏ –≤—ã —Å–ª—ã—à–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω, –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", 
                                   "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤ '{deviceDisplayName}'.\n\n" +
                                   "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.", 
                                   "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VB-Cable
        /// </summary>
        private async Task TestVBCableDevice()
        {
            try
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ VB-Cable
                string message = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VB-Cable:\n\n" +
                                "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ loopback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n" +
                                "1. –ü–æ–∏—Å–∫ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n" +
                                "2. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ VB-Cable Output\n" +
                                "3. –ó–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–∞ —Å VB-Cable Input\n" +
                                "4. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n\n" +
                                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VB-Cable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.";
                                
                if (MessageBox.Show(message, "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information) == DialogResult.Cancel)
                {
                    return;
                }
                
                bool success = await audioTester!.TestVBCableAsync(5);
                
                if (success)
                {
                    MessageBox.Show("‚úÖ VB-Cable —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                   "Loopback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n" +
                                   "VB-Cable –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Discord/–∏–≥—Ä–∞—Ö.", 
                                   "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("‚ùå VB-Cable –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n" +
                                   "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                                   "‚Ä¢ VB-Cable –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n" +
                                   "‚Ä¢ VB-Cable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n" +
                                   "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏ –∞—É–¥–∏–æ\n\n" +
                                   "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VB-Cable –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", 
                                   "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VB-Cable: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                audioTester?.Dispose();
                audioRouter?.Dispose();
                routingStatusTimer?.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #endregion

        #region Audio Routing Methods

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void LoadRoutingDevices()
        {
            try
            {
                cbRoutingInput?.Items.Clear();
                cbRoutingOutput?.Items.Clear();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
                for (int i = 0; i < WaveInEvent.DeviceCount; i++)
                {
                    var capability = WaveInEvent.GetCapabilities(i);
                    cbRoutingInput?.Items.Add($"{i}: {capability.ProductName}");
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–∏–Ω–∞–º–∏–∫–∏)
                for (int i = 0; i < WaveOut.DeviceCount; i++)
                {
                    var capability = WaveOut.GetCapabilities(i);
                    cbRoutingOutput?.Items.Add($"{i}: {capability.ProductName}");
                }

                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (cbRoutingInput?.Items.Count > 0)
                    cbRoutingInput.SelectedIndex = 0;
                if (cbRoutingOutput?.Items.Count > 0)
                    cbRoutingOutput.SelectedIndex = 0;

                LogMessage("üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnRoutingEnabledChanged(object? sender, EventArgs e)
        {
            bool enabled = cbEnableRouting?.Checked ?? false;
            
            cbRoutingInput!.Enabled = enabled;
            cbRoutingOutput!.Enabled = enabled;
            btnStartRouting!.Enabled = enabled && !audioRouter!.IsRouting;
            btnStopRouting!.Enabled = enabled && audioRouter!.IsRouting;

            if (enabled)
            {
                LogMessage("‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å'.");
            }
            else
            {
                if (audioRouter!.IsRouting)
                {
                    audioRouter.StopRouting();
                }
                LogMessage("‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private async void OnStartRouting(object? sender, EventArgs e)
        {
            try
            {
                if (cbRoutingInput?.SelectedIndex < 0 || cbRoutingOutput?.SelectedIndex < 0)
                {
                    LogMessage("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–µ –∏ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.");
                    return;
                }

                int inputIndex = cbRoutingInput?.SelectedIndex ?? -1;
                int outputIndex = cbRoutingOutput?.SelectedIndex ?? -1;
                
                if (inputIndex < 0 || outputIndex < 0)
                {
                    LogMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤.");
                    return;
                }
                
                string inputName = cbRoutingInput?.SelectedItem?.ToString() ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                string outputName = cbRoutingOutput?.SelectedItem?.ToString() ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

                bool success = await audioRouter!.StartRoutingAsync(inputIndex, outputIndex, inputName, outputName);
                
                if (success)
                {
                    btnStartRouting!.Enabled = false;
                    btnStopRouting!.Enabled = true;
                    routingStatusTimer!.Enabled = true;
                    
                    LogMessage("üéâ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!");
                }
                else
                {
                    LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnStopRouting(object? sender, EventArgs e)
        {
            try
            {
                audioRouter?.StopRouting();
                btnStartRouting!.Enabled = true;
                btnStopRouting!.Enabled = false;
                routingStatusTimer!.Enabled = false;
                
                LogMessage("‚èπÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnRoutingStatusTick(object? sender, EventArgs e)
        {
            try
            {
                if (audioRouter?.IsRouting == true)
                {
                    string stats = audioRouter.GetBufferStats();
                    LogMessage($"üìä –°—Ç–∞—Ç—É—Å: {audioRouter.CurrentRoute} | {stats}");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        /// </summary>
        private void LogMessage(string message)
        {
            try
            {
                if (tbRoutingLog?.InvokeRequired == true)
                {
                    tbRoutingLog.Invoke(new Action<string>(LogMessage), message);
                    return;
                }

                string timestamp = DateTime.Now.ToString("HH:mm:ss");
                string logEntry = $"[{timestamp}] {message}\r\n";
                
                tbRoutingLog?.AppendText(logEntry);
                tbRoutingLog?.ScrollToCaret();
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)
                if (tbRoutingLog?.Lines.Length > 1000)
                {
                    var lines = tbRoutingLog.Lines;
                    var trimmedLines = new string[500];
                    Array.Copy(lines, lines.Length - 500, trimmedLines, 0, 500);
                    tbRoutingLog.Lines = trimmedLines;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        #endregion
        
        #region TTS Voice Loading Methods
        
        /// <summary>
        /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ TTS –≥–æ–ª–æ—Å–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ Windows
        /// </summary>
        private void LoadTTSVoices()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("LoadTTSVoices() started");
                
                // –û—á–∏—â–∞–µ–º ComboBox'—ã
                cbTTSVoiceRU?.Items.Clear();
                cbTTSVoiceEN?.Items.Clear();
                
                // –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞ –∏–∑ –æ–±–µ–∏—Ö –ø—É—Ç–µ–π —Ä–µ–µ—Å—Ç—Ä–∞
                var voicesFromSpeech = GetVoicesFromRegistry(@"SOFTWARE\WOW6432Node\Microsoft\SPEECH\Voices\Tokens");
                var voicesFromSpeechOneCore = GetVoicesFromRegistry(@"SOFTWARE\WOW6432Node\Microsoft\Speech_OneCore\Voices\Tokens");
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞
                var allVoices = new List<VoiceInfo>();
                allVoices.AddRange(voicesFromSpeech);
                allVoices.AddRange(voicesFromSpeechOneCore);
                
                // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
                var uniqueVoices = allVoices
                    .GroupBy(v => v.Name)
                    .Select(g => g.First())
                    .OrderBy(v => v.Name)
                    .ToList();
                
                System.Diagnostics.Debug.WriteLine($"Found {uniqueVoices.Count} unique voices");
                
                // –†–∞–∑–¥–µ–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ —è–∑—ã–∫–∞–º
                var russianVoices = uniqueVoices.Where(v => IsRussianVoice(v)).ToList();
                var englishVoices = uniqueVoices.Where(v => IsEnglishVoice(v)).ToList();
                var otherVoices = uniqueVoices.Where(v => !IsRussianVoice(v) && !IsEnglishVoice(v)).ToList();
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º ComboBox –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
                cbTTSVoiceRU?.Items.Add("–ì–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                foreach (var voice in russianVoices)
                {
                    cbTTSVoiceRU?.Items.Add(voice.Name);
                    System.Diagnostics.Debug.WriteLine($"Added Russian voice: {voice.Name}");
                }
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º ComboBox –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
                cbTTSVoiceEN?.Items.Add("–ì–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                foreach (var voice in englishVoices)
                {
                    cbTTSVoiceEN?.Items.Add(voice.Name);
                    System.Diagnostics.Debug.WriteLine($"Added English voice: {voice.Name}");
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞
                foreach (var voice in otherVoices)
                {
                    cbTTSVoiceRU?.Items.Add($"{voice.Name} ({voice.Language})");
                    cbTTSVoiceEN?.Items.Add($"{voice.Name} ({voice.Language})");
                    System.Diagnostics.Debug.WriteLine($"Added other language voice: {voice.Name} ({voice.Language})");
                }
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (cbTTSVoiceRU?.Items.Count > 0) cbTTSVoiceRU.SelectedIndex = 0;
                if (cbTTSVoiceEN?.Items.Count > 0) cbTTSVoiceEN.SelectedIndex = 0;
                
                System.Diagnostics.Debug.WriteLine($"LoadTTSVoices() completed. RU: {cbTTSVoiceRU?.Items.Count}, EN: {cbTTSVoiceEN?.Items.Count}");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ TTS –≥–æ–ª–æ—Å–æ–≤: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ TTS –≥–æ–ª–æ—Å–æ–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–æ—Å–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ —Ä–µ–µ—Å—Ç—Ä–∞
        /// </summary>
        /// <param name="registryPath">–ü—É—Ç—å –≤ —Ä–µ–µ—Å—Ç—Ä–µ</param>
        /// <returns>–°–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤</returns>
        private List<VoiceInfo> GetVoicesFromRegistry(string registryPath)
        {
            var voices = new List<VoiceInfo>();
            
            try
            {
                using (var key = Registry.LocalMachine.OpenSubKey(registryPath))
                {
                    if (key != null)
                    {
                        System.Diagnostics.Debug.WriteLine($"Searching voices in: {registryPath}");
                        
                        foreach (string subKeyName in key.GetSubKeyNames())
                        {
                            using (var voiceKey = key.OpenSubKey(subKeyName))
                            {
                                if (voiceKey != null)
                                {
                                    try
                                    {
                                        var voiceName = voiceKey.GetValue("") as string ?? subKeyName;
                                        var language = GetVoiceLanguage(voiceKey);
                                        var gender = GetVoiceGender(voiceKey);
                                        
                                        var voiceInfo = new VoiceInfo
                                        {
                                            Name = voiceName,
                                            Language = language,
                                            Gender = gender,
                                            RegistryPath = $"{registryPath}\\{subKeyName}"
                                        };
                                        
                                        voices.Add(voiceInfo);
                                        System.Diagnostics.Debug.WriteLine($"Found voice: {voiceName} ({language}, {gender})");
                                    }
                                    catch (Exception ex)
                                    {
                                        System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞ {subKeyName}: {ex.Message}");
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine($"Registry path not found: {registryPath}");
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞ {registryPath}: {ex.Message}");
            }
            
            return voices;
        }
        
        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –≥–æ–ª–æ—Å–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        /// </summary>
        /// <param name="voiceKey">–ö–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞ –≥–æ–ª–æ—Å–∞</param>
        /// <returns>–Ø–∑—ã–∫ –≥–æ–ª–æ—Å–∞</returns>
        private string GetVoiceLanguage(RegistryKey voiceKey)
        {
            try
            {
                // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ –≤ –ø–æ–¥–∫–ª—é—á–∞—Ö
                using (var attributesKey = voiceKey.OpenSubKey("Attributes"))
                {
                    if (attributesKey != null)
                    {
                        var language = attributesKey.GetValue("Language") as string;
                        if (!string.IsNullOrEmpty(language))
                        {
                            return ConvertLanguageCode(language);
                        }
                    }
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ –ø–æ –∏–º–µ–Ω–∏ –≥–æ–ª–æ—Å–∞
                var voiceName = voiceKey.GetValue("") as string ?? "";
                return GuessLanguageFromName(voiceName);
            }
            catch
            {
                return "Unknown";
            }
        }
        
        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –≥–æ–ª–æ—Å–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        /// </summary>
        /// <param name="voiceKey">–ö–ª—é—á —Ä–µ–µ—Å—Ç—Ä–∞ –≥–æ–ª–æ—Å–∞</param>
        /// <returns>–ü–æ–ª –≥–æ–ª–æ—Å–∞</returns>
        private string GetVoiceGender(RegistryKey voiceKey)
        {
            try
            {
                using (var attributesKey = voiceKey.OpenSubKey("Attributes"))
                {
                    if (attributesKey != null)
                    {
                        var gender = attributesKey.GetValue("Gender") as string;
                        if (!string.IsNullOrEmpty(gender))
                        {
                            return gender;
                        }
                    }
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏
                var voiceName = voiceKey.GetValue("") as string ?? "";
                return GuessGenderFromName(voiceName);
            }
            catch
            {
                return "Unknown";
            }
        }
        
        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ —è–∑—ã–∫–∞ –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        /// </summary>
        /// <param name="languageCode">–ö–æ–¥ —è–∑—ã–∫–∞</param>
        /// <returns>–ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞</returns>
        private string ConvertLanguageCode(string languageCode)
        {
            var languageCodes = new Dictionary<string, string>
            {
                { "409", "English" },
                { "en-US", "English" },
                { "en-GB", "English" },
                { "419", "Russian" },
                { "ru-RU", "Russian" },
                { "ru", "Russian" },
                { "407", "German" },
                { "de-DE", "German" },
                { "40C", "French" },
                { "fr-FR", "French" },
                { "410", "Italian" },
                { "it-IT", "Italian" },
                { "40A", "Spanish" },
                { "es-ES", "Spanish" },
                { "411", "Japanese" },
                { "ja-JP", "Japanese" },
                { "804", "Chinese" },
                { "zh-CN", "Chinese" }
            };
            
            return languageCodes.TryGetValue(languageCode, out var language) ? language : languageCode;
        }
        
        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ –∏–º–µ–Ω–∏ –≥–æ–ª–æ—Å–∞
        /// </summary>
        /// <param name="voiceName">–ò–º—è –≥–æ–ª–æ—Å–∞</param>
        /// <returns>–Ø–∑—ã–∫</returns>
        private string GuessLanguageFromName(string voiceName)
        {
            if (string.IsNullOrEmpty(voiceName))
                return "Unknown";
                
            voiceName = voiceName.ToLower();
            
            if (voiceName.Contains("russian") || voiceName.Contains("ru") || 
                voiceName.Contains("pavel") || voiceName.Contains("irina") || voiceName.Contains("—Ç–∞—Ç—å—è–Ω–∞"))
                return "Russian";
                
            if (voiceName.Contains("english") || voiceName.Contains("en") || 
                voiceName.Contains("david") || voiceName.Contains("mark") || voiceName.Contains("zira"))
                return "English";
                
            if (voiceName.Contains("german") || voiceName.Contains("de") || voiceName.Contains("katja"))
                return "German";
                
            if (voiceName.Contains("french") || voiceName.Contains("fr") || voiceName.Contains("hortense"))
                return "French";
                
            if (voiceName.Contains("chinese") || voiceName.Contains("zh") || voiceName.Contains("huihui"))
                return "Chinese";
                
            if (voiceName.Contains("japanese") || voiceName.Contains("ja") || voiceName.Contains("ayumi"))
                return "Japanese";
                
            return "Unknown";
        }
        
        /// <summary>
        /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –≥–æ–ª–æ—Å–∞
        /// </summary>
        /// <param name="voiceName">–ò–º—è –≥–æ–ª–æ—Å–∞</param>
        /// <returns>–ü–æ–ª</returns>
        private string GuessGenderFromName(string voiceName)
        {
            if (string.IsNullOrEmpty(voiceName))
                return "Unknown";
                
            voiceName = voiceName.ToLower();
            
            // –ú—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
            if (voiceName.Contains("david") || voiceName.Contains("mark") || voiceName.Contains("pavel") ||
                voiceName.Contains("male") || voiceName.Contains("man"))
                return "Male";
                
            // –ñ–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞
            if (voiceName.Contains("zira") || voiceName.Contains("irina") || voiceName.Contains("—Ç–∞—Ç—å—è–Ω–∞") ||
                voiceName.Contains("katja") || voiceName.Contains("hortense") || voiceName.Contains("huihui") ||
                voiceName.Contains("ayumi") || voiceName.Contains("female") || voiceName.Contains("woman"))
                return "Female";
                
            return "Unknown";
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ–ª–æ—Å —Ä—É—Å—Å–∫–∏–º
        /// </summary>
        /// <param name="voice">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ</param>
        /// <returns>true –µ—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å</returns>
        private bool IsRussianVoice(VoiceInfo voice)
        {
            return voice.Language.Equals("Russian", StringComparison.OrdinalIgnoreCase);
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥–æ–ª–æ—Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º
        /// </summary>
        /// <param name="voice">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ</param>
        /// <returns>true –µ—Å–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≥–æ–ª–æ—Å</returns>
        private bool IsEnglishVoice(VoiceInfo voice)
        {
            return voice.Language.Equals("English", StringComparison.OrdinalIgnoreCase);
        }
        
        #endregion
        
        #region Voice Info Class
        
        /// <summary>
        /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ TTS –≥–æ–ª–æ—Å–µ
        /// </summary>
        private class VoiceInfo
        {
            public string Name { get; set; } = "";
            public string Language { get; set; } = "";
            public string Gender { get; set; } = "";
            public string RegistryPath { get; set; } = "";
        }

        #endregion
    }
}
