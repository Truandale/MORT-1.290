using System;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;
using NAudio.Wave;
using NAudio.CoreAudioApi;
using Microsoft.Win32;
using System.Collections.Generic;
using System.Linq;
using Windows.Media.SpeechSynthesis;

namespace MORT
{
    public partial class AdvancedAudioSettings : Form
    {
        #region Controls Declaration
        
        // Main container
        private TabControl? mainTabControl;
        
        // Mode Selection Tab
        private GroupBox? gbWorkMode;
        private RadioButton? rbModeOff;
        private RadioButton? rbModeIncoming;
        private RadioButton? rbModeOutgoing;
        private RadioButton? rbModeBidirectional;
        
        // STT Settings Tab
        private GroupBox? gbSTTSettings;
        private ComboBox? cbSTTEngine;
        private ComboBox? cbWhisperModel;
        private ComboBox? cbVoskModel;
        private TrackBar? tbSTTSensitivity;
        private Label? lblSTTSensitivity;
        
        // TTS Settings Tab
        private GroupBox? gbTTSSettings;
        private ComboBox? cbTTSEngine;
        private ComboBox? cbTTSVoiceRU;
        private ComboBox? cbTTSVoiceEN;
        private TrackBar? tbTTSSpeedRU;
        private TrackBar? tbTTSSpeedEN;
        private TrackBar? tbTTSVolumeRU;
        private TrackBar? tbTTSVolumeEN;
        
        // Audio Devices Tab
        private GroupBox? gbAudioDevices;
        private ComboBox? cbMicrophone;
        private ComboBox? cbSpeakers;
        private ComboBox? cbHeadphones;
        private ComboBox? cbVBCable;
        private Button? btnTestMicrophone;
        private Button? btnTestSpeakers;
        private Button? btnTestVBCable;
        
        // VAD Settings Tab
        private GroupBox? gbVADSettings;
        private TrackBar? tbVADThreshold;
        private TrackBar? tbMinDuration;
        private TrackBar? tbSilenceTimeout;
        private CheckBox? cbEnableVAD;
        private Label? lblVADThreshold;
        private Label? lblMinDuration;
        private Label? lblSilenceTimeout;
        
        // Translation Settings Tab
        private GroupBox? gbTranslationSettings;
        private ComboBox? cbTranslationEngine;
        private TextBox? tbLibreTranslateURL;
        private ComboBox? cbSourceLanguage;
        private ComboBox? cbTargetLanguage;
        private Button? btnTestTranslation;
        
        // Monitoring Tab
        private GroupBox? gbMonitoring;
        private TextBox? tbIncomingText;
        private TextBox? tbTranslatedText;
        private TextBox? tbOutgoingText;
        private ProgressBar? pbMicLevel;
        private ProgressBar? pbSpeakerLevel;
        private Label? lblStatus;
        private Label? lblLatency;
        
        // Monitoring Variables
        private WaveInEvent? monitoringWaveIn;
        private WaveOutEvent? monitoringWaveOut;
        private Timer? monitoringTimer;
        private bool isMonitoring = false;
        
        // STT (Speech-to-Text) Variables
        private List<byte> audioBuffer = new List<byte>();
        private DateTime lastVoiceActivity = DateTime.MinValue;
        private bool isCollectingAudio = false;
        private float voiceThreshold = 0.005f; // –ü–æ—Ä–æ–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ (–±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π)
        private int silenceDurationMs = 1000; // –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π (1 —Å–µ–∫)
        private int debugCounter = 0; // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        
        // Universal Mode Tab - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞
        private GroupBox? gbUniversalMode;
        private CheckBox? cbEnableUniversal;
        private Button? btnStartUniversal;
        private Button? btnStopUniversal;
        private Button? btnToggleTranslation;
        private Label? lblUniversalStatus;
        private TextBox? tbUniversalLog;
        private ComboBox? cbPhysicalMicrophone;
        private ComboBox? cbPhysicalSpeakers;
        private Label? lblPhysicalDevices;
        private Label? lblVirtualDevices;
        private Label? lblVBCableStatus;
        private Timer? universalStatusTimer;
        
        // Universal Mode Manager
        private UniversalAudioTranslateManager? universalManager;
        
        // Control Buttons
        private Button? btnStart;
        private Button? btnStop;
        private Button? btnPause;
        private Button? btnApply;
        private Button? btnCancel;
        private Button? btnOK;
        
        // Settings Manager Reference
        private SettingManager? settingManager;
        
        // Audio Device Tester
        private AudioDeviceTester? audioTester;
        
        // Experimental Audio Router
        private AudioRouter? audioRouter;
        
        // Audio Routing Controls
        private GroupBox? gbAudioRouting;
        private CheckBox? cbEnableRouting;
        private ComboBox? cbRoutingInput;
        private ComboBox? cbRoutingOutput;
        private Button? btnStartRouting;
        private Button? btnStopRouting;
        private TextBox? tbRoutingLog;
        private Timer? routingStatusTimer;
        
        #endregion

        public AdvancedAudioSettings()
        {
            audioTester = new AudioDeviceTester();
            audioRouter = new AudioRouter();
            InitializeComponent();
            InitializeCustomControls();
            LoadSettings();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            audioRouter.OnLog += LogMessage;
        }

        public AdvancedAudioSettings(SettingManager settingManager)
        {
            audioTester = new AudioDeviceTester();
            audioRouter = new AudioRouter();
            this.settingManager = settingManager;
            InitializeComponent();
            InitializeCustomControls();
            LoadSettings();
            
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            audioRouter.OnLog += LogMessage;
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            // Form properties
            this.Text = "AutoVoiceTranslator - –ù–∞—Å—Ç—Ä–æ–π–∫–∏";
            this.Size = new Size(800, 600);
            this.StartPosition = FormStartPosition.CenterParent;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.BackColor = Color.LightGray;
            this.ForeColor = Color.Black;
            
            this.ResumeLayout(false);
        }

        private void InitializeCustomControls()
        {
            // Main TabControl
            mainTabControl = new TabControl()
            {
                Location = new Point(10, 10),
                Size = new Size(760, 500),
                Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom
            };

            // Create tabs
            CreateModeTab();
            CreateSTTTab();
            CreateTTSTab();
            CreateAudioDevicesTab();
            CreateAudioRoutingTab(); // –ù–æ–≤–∞—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
            CreateUniversalTab(); // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥–∞
            CreateVADTab();
            CreateTranslationTab();
            CreateMonitoringTab();

            this.Controls.Add(mainTabControl);

            // Control buttons
            CreateControlButtons();
            
            // Initialize translation engines from main app
            InitializeTranslationEngines();
        }

        private void CreateModeTab()
        {
            TabPage modeTab = new TabPage("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã");
            
            gbWorkMode = new GroupBox()
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
                Location = new Point(10, 10),
                Size = new Size(720, 140),
                ForeColor = Color.Black
            };

            rbModeOff = new RadioButton()
            {
                Text = "üî¥ –í—ã–∫–ª—é—á–µ–Ω",
                Location = new Point(20, 30),
                Size = new Size(150, 25),
                ForeColor = Color.Black,
                Checked = true
            };

            rbModeIncoming = new RadioButton()
            {
                Text = "üì• –í—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ (EN‚ÜíRU)",
                Location = new Point(20, 60),
                Size = new Size(250, 25),
                ForeColor = Color.Black
            };

            rbModeOutgoing = new RadioButton()
            {
                Text = "üì§ –ò—Å—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ (RU‚ÜíEN)",
                Location = new Point(300, 60),
                Size = new Size(250, 25),
                ForeColor = Color.Black
            };

            rbModeBidirectional = new RadioButton()
            {
                Text = "üîÑ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–µ—Ä–µ–≤–æ–¥",
                Location = new Point(20, 90),
                Size = new Size(250, 25),
                ForeColor = Color.Black
            };

            gbWorkMode.Controls.AddRange(new Control[] 
            { 
                rbModeOff, rbModeIncoming, rbModeOutgoing, rbModeBidirectional 
            });
            
            modeTab.Controls.Add(gbWorkMode);
            mainTabControl?.TabPages.Add(modeTab);
        }

        private void CreateSTTTab()
        {
            TabPage sttTab = new TabPage("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (STT)");
            
            // –ü–ï–†–í–´–ú –î–ï–õ–û–ú –¥–æ–±–∞–≤–ª—è–µ–º –≠–ö–°–¢–†–ï–ù–ù–£–Æ –∫–Ω–æ–ø–∫—É –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö
            Button btnEmergencySTT = new Button()
            {
                Text = "üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ö–ù–û–ü–ö–ê STT üö®",
                Location = new Point(10, 5),    // –°–∞–º—ã–π –≤–µ—Ä—Ö –≤–∫–ª–∞–¥–∫–∏
                Size = new Size(400, 80),       // –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è
                BackColor = Color.Orange,       // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
                ForeColor = Color.Black,        // –ß–µ—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
                Font = new Font("Arial", 16, FontStyle.Bold),  // –û—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
                Visible = true,
                Enabled = true,
                Name = "btnEmergencySTT"
            };
            
            btnEmergencySTT.Click += (s, e) => {
                MessageBox.Show("üéâ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ STT –†–ê–ë–û–¢–ê–ï–¢!\n\n‚úÖ STT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –î–û–°–¢–£–ü–ï–ù!\n‚úÖ –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏!", "STT –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            };
            
            sttTab.Controls.Add(btnEmergencySTT);
            System.Diagnostics.Debug.WriteLine("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –∫–Ω–æ–ø–∫–∞ STT –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∞–º—ã–π –≤–µ—Ä—Ö!");
            
            gbSTTSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Speech-to-Text",
                Location = new Point(10, 95),   // –°–¥–≤–∏–≥–∞–µ–º –≤–Ω–∏–∑ –ø–æ–¥ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
                Size = new Size(720, 350),      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å 250 –¥–æ 350
                ForeColor = Color.Black
            };

            // STT Engine
            Label lblSTTEngine = new Label()
            {
                Text = "–î–≤–∏–∂–æ–∫ STT:",
                Location = new Point(20, 30),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbSTTEngine = new ComboBox()
            {
                Location = new Point(130, 28),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbSTTEngine.Items.AddRange(new string[] { "Whisper.NET", "Vosk.NET" });
            cbSTTEngine.SelectedIndex = 0;

            // Whisper Model
            Label lblWhisperModel = new Label()
            {
                Text = "–ú–æ–¥–µ–ª—å Whisper:",
                Location = new Point(20, 65),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbWhisperModel = new ComboBox()
            {
                Location = new Point(130, 63),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbWhisperModel.Items.AddRange(new string[] 
            { 
                "tiny (39MB, –±—ã—Å—Ç—Ä–∞—è)", 
                "base (74MB, –±–∞–∑–æ–≤–∞—è)", 
                "small (244MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", 
                "medium (769MB, —Ö–æ—Ä–æ—à–∞—è)", 
                "large (1550MB, –ª—É—á—à–∞—è)" 
            });
            cbWhisperModel.SelectedIndex = 2;

            // Vosk Model
            Label lblVoskModel = new Label()
            {
                Text = "–ú–æ–¥–µ–ª—å Vosk:",
                Location = new Point(20, 100),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbVoskModel = new ComboBox()
            {
                Location = new Point(130, 98),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbVoskModel.Items.AddRange(new string[] 
            { 
                "vosk-model-ru-0.42 (–†—É—Å—Å–∫–∏–π)", 
                "vosk-model-en-us-0.22 (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π)",
                "vosk-model-small-ru-0.22 (–†—É—Å—Å–∫–∏–π –º–∞–ª—ã–π)",
                "vosk-model-small-en-us-0.15 (–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –º–∞–ª—ã–π)"
            });

            // STT Sensitivity
            lblSTTSensitivity = new Label()
            {
                Text = "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 50%",
                Location = new Point(20, 135),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            tbSTTSensitivity = new TrackBar()
            {
                Location = new Point(130, 130),
                Size = new Size(200, 45),
                Minimum = 0,
                Maximum = 100,
                Value = 50,
                TickFrequency = 10
            };
            tbSTTSensitivity.ValueChanged += (s, e) => 
            {
                lblSTTSensitivity.Text = $"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tbSTTSensitivity.Value}%";
            };

            // –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è STT
            Button btnTestSTT = new Button()
            {
                Text = "üß™ –¢–µ—Å—Ç STT",
                Location = new Point(20, 190),  // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–¥ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                Size = new Size(200, 50),       // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                ForeColor = Color.White,
                BackColor = Color.Red,          // –î–µ–ª–∞–µ–º –æ—á–µ–Ω—å —è—Ä–∫–æ–π
                Visible = true,
                Enabled = true,
                Name = "btnTestSTT",
                Font = new Font("Segoe UI", 12, FontStyle.Bold)  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
            };
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            System.Diagnostics.Debug.WriteLine("üîß –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è STT");
            System.Diagnostics.Debug.WriteLine($"üîß –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: Text={btnTestSTT.Text}, Size={btnTestSTT.Size}, Location={btnTestSTT.Location}");
            
            try
            {
                btnTestSTT.Click += BtnTestSTT_Click;
                System.Diagnostics.Debug.WriteLine("üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {ex.Message}");
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                btnTestSTT.Click += (s, e) => {
                    MessageBox.Show("–¢–µ—Å—Ç STT –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!", "–¢–µ—Å—Ç", MessageBoxButtons.OK, MessageBoxIcon.Information);
                };
            }

            gbSTTSettings.Controls.AddRange(new Control[] 
            { 
                lblSTTEngine, cbSTTEngine,
                lblWhisperModel, cbWhisperModel,
                lblVoskModel, cbVoskModel,
                lblSTTSensitivity, tbSTTSensitivity,
                btnTestSTT
            });
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            System.Diagnostics.Debug.WriteLine($"üîß –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ –≤ gbSTTSettings: {gbSTTSettings.Controls.Count}");
            System.Diagnostics.Debug.WriteLine($"üîß –†–∞–∑–º–µ—Ä gbSTTSettings: {gbSTTSettings.Size}");
            foreach (Control ctrl in gbSTTSettings.Controls)
            {
                System.Diagnostics.Debug.WriteLine($"üîß –ö–æ–Ω—Ç—Ä–æ–ª: {ctrl.Name} ({ctrl.GetType().Name}) - {ctrl.Text}");
            }
            
            sttTab.Controls.Add(gbSTTSettings);
            
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–ê–ü–†–Ø–ú–£–Æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
            Button btnTestSTTDirect = new Button()
            {
                Text = "üéØ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ STT",
                Location = new Point(250, 190),  // –†—è–¥–æ–º —Å –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
                Size = new Size(200, 50),        // –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä
                BackColor = Color.DarkRed,       // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                ForeColor = Color.Yellow,        // –ñ–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç
                Font = new Font("Arial", 12, FontStyle.Bold),  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
                Visible = true,
                Enabled = true,
                Name = "btnTestSTTDirect"
            };
            
            btnTestSTTDirect.Click += (s, e) => {
                MessageBox.Show("–ü–†–Ø–ú–ê–Ø –∫–Ω–æ–ø–∫–∞ STT —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å STT.", "–£—Å–ø–µ—Ö!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            };
            
            sttTab.Controls.Add(btnTestSTTDirect);
            System.Diagnostics.Debug.WriteLine("üéØ –ü–†–Ø–ú–ê–Ø –∫–Ω–æ–ø–∫–∞ STT –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É!");
            
            // –¢–†–ï–¢–¨–Ø –∫–Ω–æ–ø–∫–∞ - –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –≤–∫–ª–∞–¥–∫–∏ (–ù–ï –≤ GroupBox)
            Button btnTestSTTTop = new Button()
            {
                Text = "üö® –í–ï–†–•–ù–Ø–Ø –ö–ù–û–ü–ö–ê STT",
                Location = new Point(20, 370),   // –ü–æ–¥ GroupBox
                Size = new Size(300, 60),        // –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è
                BackColor = Color.Blue,          // –°–∏–Ω–∏–π —Ñ–æ–Ω
                ForeColor = Color.White,         // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
                Font = new Font("Arial", 14, FontStyle.Bold),  // –ö—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç
                Visible = true,
                Enabled = true,
                Name = "btnTestSTTTop"
            };
            
            btnTestSTTTop.Click += (s, e) => {
                MessageBox.Show("–í–ï–†–•–ù–Ø–Ø –∫–Ω–æ–ø–∫–∞ STT —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–≠—Ç–æ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ STT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω.", "STT –ì–æ—Ç–æ–≤!", MessageBoxButtons.OK, MessageBoxIcon.Information);
            };
            
            sttTab.Controls.Add(btnTestSTTTop);
            System.Diagnostics.Debug.WriteLine("üö® –í–ï–†–•–ù–Ø–Ø –∫–Ω–æ–ø–∫–∞ STT –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É!");
            
            mainTabControl?.TabPages.Add(sttTab);
        }

        private void CreateTTSTab()
        {
            TabPage ttsTab = new TabPage("–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ (TTS)");
            
            gbTTSSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Text-to-Speech",
                Location = new Point(10, 10),
                Size = new Size(720, 250),
                ForeColor = Color.Black
            };

            // TTS Engine
            Label lblTTSEngine = new Label()
            {
                Text = "–î–≤–∏–∂–æ–∫ TTS:",
                Location = new Point(20, 30),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbTTSEngine = new ComboBox()
            {
                Location = new Point(130, 28),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbTTSEngine.Items.AddRange(new string[] { "System.Speech", "Azure TTS" });
            cbTTSEngine.SelectedIndex = 0;

            // Russian Voice
            Label lblTTSVoiceRU = new Label()
            {
                Text = "–ì–æ–ª–æ—Å (RU):",
                Location = new Point(20, 65),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbTTSVoiceRU = new ComboBox()
            {
                Location = new Point(130, 63),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // English Voice
            Label lblTTSVoiceEN = new Label()
            {
                Text = "–ì–æ–ª–æ—Å (EN):",
                Location = new Point(350, 65),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbTTSVoiceEN = new ComboBox()
            {
                Location = new Point(460, 63),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // Speed controls
            Label lblSpeedRU = new Label()
            {
                Text = "–°–∫–æ—Ä–æ—Å—Ç—å RU: 50%",
                Location = new Point(20, 100),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSSpeedRU = new TrackBar()
            {
                Location = new Point(130, 95),
                Size = new Size(150, 45),
                Minimum = 10,
                Maximum = 200,
                Value = 100,
                TickFrequency = 20
            };

            Label lblSpeedEN = new Label()
            {
                Text = "–°–∫–æ—Ä–æ—Å—Ç—å EN: 50%",
                Location = new Point(350, 100),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSSpeedEN = new TrackBar()
            {
                Location = new Point(460, 95),
                Size = new Size(150, 45),
                Minimum = 10,
                Maximum = 200,
                Value = 100,
                TickFrequency = 20
            };

            // Volume controls
            Label lblVolumeRU = new Label()
            {
                Text = "–ì—Ä–æ–º–∫–æ—Å—Ç—å RU: 100%",
                Location = new Point(20, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSVolumeRU = new TrackBar()
            {
                Location = new Point(130, 145),
                Size = new Size(150, 45),
                Minimum = 0,
                Maximum = 100,
                Value = 100,
                TickFrequency = 10
            };

            Label lblVolumeEN = new Label()
            {
                Text = "–ì—Ä–æ–º–∫–æ—Å—Ç—å EN: 100%",
                Location = new Point(350, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbTTSVolumeEN = new TrackBar()
            {
                Location = new Point(460, 145),
                Size = new Size(150, 45),
                Minimum = 0,
                Maximum = 100,
                Value = 100,
                TickFrequency = 10
            };

            gbTTSSettings.Controls.AddRange(new Control[] 
            { 
                lblTTSEngine, cbTTSEngine,
                lblTTSVoiceRU, cbTTSVoiceRU,
                lblTTSVoiceEN, cbTTSVoiceEN,
                lblSpeedRU, tbTTSSpeedRU,
                lblSpeedEN, tbTTSSpeedEN,
                lblVolumeRU, tbTTSVolumeRU,
                lblVolumeEN, tbTTSVolumeEN
            });
            
            ttsTab.Controls.Add(gbTTSSettings);
            mainTabControl?.TabPages.Add(ttsTab);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ TTS –≥–æ–ª–æ—Å–∞
            LoadTTSVoices();
        }

        private void LoadTTSVoices()
        {
            try
            {
                if (cbTTSVoiceRU == null || cbTTSVoiceEN == null) return;

                cbTTSVoiceRU.Items.Clear();
                cbTTSVoiceEN.Items.Clear();

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Windows.Media.SpeechSynthesis –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
                var synthesizer = new Windows.Media.SpeechSynthesis.SpeechSynthesizer();
                var voices = Windows.Media.SpeechSynthesis.SpeechSynthesizer.AllVoices;

                if (voices.Count > 0)
                {
                    foreach (var voice in voices)
                    {
                        string voiceName = voice.DisplayName;
                        string language = voice.Language;

                        // –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –≤ cbTTSVoiceRU
                        if (language.StartsWith("ru") || voiceName.ToLower().Contains("russian") || 
                            voiceName.ToLower().Contains("—Ä—É—Å—Å–∫–∏–π"))
                        {
                            cbTTSVoiceRU.Items.Add($"{voiceName} ({language})");
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –≤ cbTTSVoiceEN
                        if (language.StartsWith("en") || voiceName.ToLower().Contains("english") || 
                            voiceName.ToLower().Contains("american") || voiceName.ToLower().Contains("british"))
                        {
                            cbTTSVoiceEN.Items.Add($"{voiceName} ({language})");
                        }
                        
                        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞ –≤ –æ–±–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
                        if (!language.StartsWith("ru") && !language.StartsWith("en"))
                        {
                            cbTTSVoiceRU.Items.Add($"{voiceName} ({language})");
                            cbTTSVoiceEN.Items.Add($"{voiceName} ({language})");
                        }
                    }
                }
                else
                {
                    // –ï—Å–ª–∏ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    cbTTSVoiceRU.Items.Add("–ì–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                    cbTTSVoiceEN.Items.Add("No voices found");
                }

                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
                if (cbTTSVoiceRU.Items.Count > 0) cbTTSVoiceRU.SelectedIndex = 0;
                if (cbTTSVoiceEN.Items.Count > 0) cbTTSVoiceEN.SelectedIndex = 0;

                System.Diagnostics.Debug.WriteLine($"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: RU={cbTTSVoiceRU.Items.Count}, EN={cbTTSVoiceEN.Items.Count}");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TTS –≥–æ–ª–æ—Å–æ–≤: {ex.Message}");
                
                if (cbTTSVoiceRU != null)
                {
                    cbTTSVoiceRU.Items.Clear();
                    cbTTSVoiceRU.Items.Add("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤");
                }
                
                if (cbTTSVoiceEN != null)
                {
                    cbTTSVoiceEN.Items.Clear();
                    cbTTSVoiceEN.Items.Add("Error loading voices");
                }
            }
        }

        private void CreateAudioDevicesTab()
        {
            TabPage devicesTab = new TabPage("–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞");
            
            gbAudioDevices = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                Location = new Point(10, 10),
                Size = new Size(720, 300),
                ForeColor = Color.Black
            };

            // Microphone
            Label lblMicrophone = new Label()
            {
                Text = "üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω:",
                Location = new Point(20, 30),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbMicrophone = new ComboBox()
            {
                Location = new Point(130, 28),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            btnTestMicrophone = new Button()
            {
                Text = "–¢–µ—Å—Ç",
                Location = new Point(440, 27),
                Size = new Size(60, 25),
                ForeColor = Color.Black,
                BackColor = Color.LightBlue, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                Name = "btnTestMicrophone",
                Enabled = true,
                Visible = true,
                TabStop = true,
                UseVisualStyleBackColor = false
            };
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
            btnTestMicrophone.Click += async (s, e) => {
                await TestMicrophoneDevice();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            btnTestMicrophone.MouseEnter += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
                btnTestMicrophone.BackColor = Color.Blue;
            };
            btnTestMicrophone.MouseLeave += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞");
                btnTestMicrophone.BackColor = Color.LightBlue;
            };

            // Speakers
            Label lblSpeakers = new Label()
            {
                Text = "üîä –î–∏–Ω–∞–º–∏–∫–∏:",
                Location = new Point(20, 70),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbSpeakers = new ComboBox()
            {
                Location = new Point(130, 68),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            btnTestSpeakers = new Button()
            {
                Text = "–¢–µ—Å—Ç",
                Location = new Point(440, 67),
                Size = new Size(60, 25),
                ForeColor = Color.Black,
                BackColor = Color.LightGreen, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                Name = "btnTestSpeakers",
                Enabled = true,
                Visible = true,
                TabStop = true,
                UseVisualStyleBackColor = false
            };
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏–∫–æ–≤
            btnTestSpeakers.Click += async (s, e) => {
                await TestSpeakersDevice();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            btnTestSpeakers.MouseEnter += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                btnTestSpeakers.BackColor = Color.Green;
            };
            btnTestSpeakers.MouseLeave += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤");
                btnTestSpeakers.BackColor = Color.LightGreen;
            };

            // Headphones
            Label lblHeadphones = new Label()
            {
                Text = "üéß –ù–∞—É—à–Ω–∏–∫–∏:",
                Location = new Point(20, 110),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbHeadphones = new ComboBox()
            {
                Location = new Point(130, 108),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // VB-Cable
            Label lblVBCable = new Label()
            {
                Text = "üéõÔ∏è VB-Cable:",
                Location = new Point(20, 150),
                Size = new Size(100, 20),
                ForeColor = Color.Black
            };

            cbVBCable = new ComboBox()
            {
                Location = new Point(130, 148),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            btnTestVBCable = new Button()
            {
                Text = "–¢–µ—Å—Ç",
                Location = new Point(440, 147),
                Size = new Size(60, 25),
                ForeColor = Color.Black,
                BackColor = Color.LightYellow, // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π
                Name = "btnTestVBCable",
                Enabled = true,
                Visible = true,
                TabStop = true,
                UseVisualStyleBackColor = false
            };
            
            // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ø–æ–ª–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º VB-Cable
            btnTestVBCable.Click += async (s, e) => {
                await TestVBCableDevice();
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            btnTestVBCable.MouseEnter += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –≤–æ—à–ª–∞ –≤ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ VB-Cable");
                btnTestVBCable.BackColor = Color.Yellow;
            };
            btnTestVBCable.MouseLeave += (s, e) => {
                System.Diagnostics.Debug.WriteLine("–ú—ã—à—å –ø–æ–∫–∏–Ω—É–ª–∞ –∑–æ–Ω—É –∫–Ω–æ–ø–∫–∏ VB-Cable");
                btnTestVBCable.BackColor = Color.LightYellow;
            };

            // Status info
            Label lblDeviceInfo = new Label()
            {
                Text = "‚ÑπÔ∏è VB-Cable –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω –≤ Discord/–∏–≥—Ä–µ",
                Location = new Point(20, 190),
                Size = new Size(600, 40),
                ForeColor = Color.DarkBlue
            };

            // Test All Devices button
            Button btnTestAllDevices = new Button()
            {
                Text = "üîç –¢–µ—Å—Ç –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                Location = new Point(20, 240),
                Size = new Size(200, 30),
                ForeColor = Color.Black,
                BackColor = Color.LightGreen
            };
            btnTestAllDevices.Click += OnClick_TestAllAudioDevices;

            gbAudioDevices.Controls.AddRange(new Control[] 
            { 
                lblMicrophone, cbMicrophone, btnTestMicrophone,
                lblSpeakers, cbSpeakers, btnTestSpeakers,
                lblHeadphones, cbHeadphones,
                lblVBCable, cbVBCable, btnTestVBCable,
                lblDeviceInfo,
                btnTestAllDevices
            });
            
            devicesTab.Controls.Add(gbAudioDevices);
            mainTabControl?.TabPages.Add(devicesTab);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            LoadAudioDevices();
        }

        private void CreateAudioRoutingTab()
        {
            TabPage routingTab = new TabPage("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–û)");
            
            gbAudioRouting = new GroupBox()
            {
                Text = "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–∞",
                Location = new Point(10, 10),
                Size = new Size(720, 400),
                ForeColor = Color.Black
            };

            // Warning label
            Label lblWarning = new Label()
            {
                Text = "‚ö†Ô∏è –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø! –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VB-Audio Virtual Cable –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ-—Ä–æ—É—Ç–∏–Ω–≥–∞.",
                Location = new Point(20, 25),
                Size = new Size(680, 40),
                ForeColor = Color.DarkRed,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            // Enable routing checkbox
            cbEnableRouting = new CheckBox()
            {
                Text = "üîÑ –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ",
                Location = new Point(20, 75),
                Size = new Size(250, 20),
                ForeColor = Color.Black,
                Checked = false
            };
            cbEnableRouting.CheckedChanged += OnRoutingEnabledChanged;

            // Input device selection
            Label lblRoutingInput = new Label()
            {
                Text = "–ò—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞):",
                Location = new Point(20, 110),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbRoutingInput = new ComboBox()
            {
                Location = new Point(150, 108),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Enabled = false
            };

            // Output device selection
            Label lblRoutingOutput = new Label()
            {
                Text = "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–∫—É–¥–∞):",
                Location = new Point(20, 145),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbRoutingOutput = new ComboBox()
            {
                Location = new Point(150, 143),
                Size = new Size(300, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Enabled = false
            };

            // Control buttons
            btnStartRouting = new Button()
            {
                Text = "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                Location = new Point(470, 108),
                Size = new Size(100, 30),
                ForeColor = Color.White,
                BackColor = Color.Green,
                Enabled = false
            };
            btnStartRouting.Click += OnStartRouting;

            btnStopRouting = new Button()
            {
                Text = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                Location = new Point(580, 108),
                Size = new Size(100, 30),
                ForeColor = Color.White,
                BackColor = Color.Red,
                Enabled = false
            };
            btnStopRouting.Click += OnStopRouting;

            // Log output
            Label lblLog = new Label()
            {
                Text = "–ñ—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                Location = new Point(20, 185),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbRoutingLog = new TextBox()
            {
                Location = new Point(20, 210),
                Size = new Size(680, 120),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.Black,
                ForeColor = Color.LimeGreen,
                Font = new Font("Consolas", 9),
                Text = "üìù –ñ—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ...\r\n"
            };

            // Status update timer
            routingStatusTimer = new Timer()
            {
                Interval = 1000, // Update every second
                Enabled = false
            };
            routingStatusTimer.Tick += OnRoutingStatusTick;

            gbAudioRouting.Controls.AddRange(new Control[] 
            { 
                lblWarning,
                cbEnableRouting,
                lblRoutingInput, cbRoutingInput,
                lblRoutingOutput, cbRoutingOutput,
                btnStartRouting, btnStopRouting,
                lblLog, tbRoutingLog
            });
            
            routingTab.Controls.Add(gbAudioRouting);
            mainTabControl?.TabPages.Add(routingTab);
            
            // Load audio devices for routing
            LoadRoutingDevices();
        }

        private void CreateVADTab()
        {
            TabPage vadTab = new TabPage("VAD (–î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ—á–∏)");
            
            gbVADSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Voice Activity Detection",
                Location = new Point(10, 10),
                Size = new Size(720, 250),
                ForeColor = Color.Black
            };

            cbEnableVAD = new CheckBox()
            {
                Text = "‚úÖ –í–∫–ª—é—á–∏—Ç—å VAD (Silero Neural Network)",
                Location = new Point(20, 30),
                Size = new Size(300, 20),
                ForeColor = Color.Black,
                Checked = true
            };

            // VAD Threshold
            lblVADThreshold = new Label()
            {
                Text = "–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏: 0.5",
                Location = new Point(20, 70),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbVADThreshold = new TrackBar()
            {
                Location = new Point(230, 65),
                Size = new Size(200, 45),
                Minimum = 10,
                Maximum = 95,
                Value = 50,
                TickFrequency = 5
            };
            tbVADThreshold.ValueChanged += (s, e) => 
            {
                lblVADThreshold.Text = $"–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ—á–∏: {tbVADThreshold.Value / 100.0:F2}";
            };

            // Min Duration
            lblMinDuration = new Label()
            {
                Text = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 0.5 —Å–µ–∫",
                Location = new Point(20, 120),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbMinDuration = new TrackBar()
            {
                Location = new Point(230, 115),
                Size = new Size(200, 45),
                Minimum = 1,
                Maximum = 30,
                Value = 5,
                TickFrequency = 2
            };
            tbMinDuration.ValueChanged += (s, e) => 
            {
                lblMinDuration.Text = $"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tbMinDuration.Value / 10.0:F1} —Å–µ–∫";
            };

            // Silence Timeout
            lblSilenceTimeout = new Label()
            {
                Text = "–¢–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã: 2.0 —Å–µ–∫",
                Location = new Point(20, 170),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbSilenceTimeout = new TrackBar()
            {
                Location = new Point(230, 165),
                Size = new Size(200, 45),
                Minimum = 5,
                Maximum = 100,
                Value = 20,
                TickFrequency = 5
            };
            tbSilenceTimeout.ValueChanged += (s, e) => 
            {
                lblSilenceTimeout.Text = $"–¢–∞–π–º–∞—É—Ç —Ç–∏—à–∏–Ω—ã: {tbSilenceTimeout.Value / 10.0:F1} —Å–µ–∫";
            };

            gbVADSettings.Controls.AddRange(new Control[] 
            { 
                cbEnableVAD,
                lblVADThreshold, tbVADThreshold,
                lblMinDuration, tbMinDuration,
                lblSilenceTimeout, tbSilenceTimeout
            });
            
            vadTab.Controls.Add(gbVADSettings);
            mainTabControl?.TabPages.Add(vadTab);
        }

        private void CreateTranslationTab()
        {
            TabPage translationTab = new TabPage("–ü–µ—Ä–µ–≤–æ–¥");
            
            gbTranslationSettings = new GroupBox()
            {
                Text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞",
                Location = new Point(10, 10),
                Size = new Size(720, 300),
                ForeColor = Color.Black
            };

            // Translation Engine
            Label lblTranslationEngine = new Label()
            {
                Text = "–î–≤–∏–∂–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:",
                Location = new Point(20, 30),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbTranslationEngine = new ComboBox()
            {
                Location = new Point(150, 28),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            // Translation engines will be initialized in InitializeTranslationEngines() method

            // API Keys info (using existing keys from main app)
            Label lblAPIInfo = new Label()
            {
                Text = "‚ÑπÔ∏è API –∫–ª—é—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                Location = new Point(20, 70),
                Size = new Size(450, 20),
                ForeColor = Color.DarkBlue,
                Font = new Font("Segoe UI", 9, FontStyle.Italic)
            };

            Button btnOpenMainSettings = new Button()
            {
                Text = "üìù –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API",
                Location = new Point(150, 100),
                Size = new Size(180, 30),
                ForeColor = Color.Black
            };
            btnOpenMainSettings.Click += (s, e) => OpenMainAPISettings();

            // LibreTranslate URL
            Label lblLibreTranslate = new Label()
            {
                Text = "LibreTranslate URL:",
                Location = new Point(20, 110),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            tbLibreTranslateURL = new TextBox()
            {
                Location = new Point(150, 108),
                Size = new Size(300, 25),
                Text = "http://localhost:5000"
            };

            // Source Language
            Label lblSourceLang = new Label()
            {
                Text = "–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫:",
                Location = new Point(20, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbSourceLanguage = new ComboBox()
            {
                Location = new Point(150, 148),
                Size = new Size(120, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbSourceLanguage.Items.AddRange(new string[] { "RU", "EN" });
            cbSourceLanguage.SelectedIndex = 0;

            // Target Language
            Label lblTargetLang = new Label()
            {
                Text = "–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫:",
                Location = new Point(290, 150),
                Size = new Size(120, 20),
                ForeColor = Color.Black
            };

            cbTargetLanguage = new ComboBox()
            {
                Location = new Point(410, 148),
                Size = new Size(120, 25),
                DropDownStyle = ComboBoxStyle.DropDownList
            };
            cbTargetLanguage.Items.AddRange(new string[] { "EN", "RU" });
            cbTargetLanguage.SelectedIndex = 0;

            btnTestTranslation = new Button()
            {
                Text = "–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞",
                Location = new Point(150, 190),
                Size = new Size(120, 30),
                ForeColor = Color.Black
            };
            btnTestTranslation.Click += BtnTestTranslation_Click;

            gbTranslationSettings.Controls.AddRange(new Control[] 
            { 
                lblTranslationEngine, cbTranslationEngine,
                lblAPIInfo, btnOpenMainSettings,
                lblLibreTranslate, tbLibreTranslateURL,
                lblSourceLang, cbSourceLanguage,
                lblTargetLang, cbTargetLanguage,
                btnTestTranslation
            });
            
            translationTab.Controls.Add(gbTranslationSettings);
            mainTabControl?.TabPages.Add(translationTab);
        }

        private void CreateMonitoringTab()
        {
            TabPage monitoringTab = new TabPage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥");
            
            gbMonitoring = new GroupBox()
            {
                Text = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                Location = new Point(10, 10),
                Size = new Size(720, 400),
                ForeColor = Color.Black
            };

            // Status
            lblStatus = new Label()
            {
                Text = "–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                Location = new Point(20, 30),
                Size = new Size(200, 20),
                ForeColor = Color.Red,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            lblLatency = new Label()
            {
                Text = "–ó–∞–¥–µ—Ä–∂–∫–∞: N/A",
                Location = new Point(240, 30),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            // Microphone Level
            Label lblMicLevel = new Label()
            {
                Text = "üé§ –£—Ä–æ–≤–µ–Ω—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:",
                Location = new Point(20, 70),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            pbMicLevel = new ProgressBar()
            {
                Location = new Point(180, 68),
                Size = new Size(200, 20),
                Style = ProgressBarStyle.Continuous
            };

            // Speaker Level
            Label lblSpeakerLevel = new Label()
            {
                Text = "üîä –£—Ä–æ–≤–µ–Ω—å –¥–∏–Ω–∞–º–∏–∫–æ–≤:",
                Location = new Point(20, 100),
                Size = new Size(150, 20),
                ForeColor = Color.Black
            };

            pbSpeakerLevel = new ProgressBar()
            {
                Location = new Point(180, 98),
                Size = new Size(200, 20),
                Style = ProgressBarStyle.Continuous
            };

            // Text monitoring
            Label lblIncoming = new Label()
            {
                Text = "–í—Ö–æ–¥—è—â–∏–π —Ç–µ–∫—Å—Ç (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π):",
                Location = new Point(20, 140),
                Size = new Size(250, 20),
                ForeColor = Color.Black
            };

            tbIncomingText = new TextBox()
            {
                Location = new Point(20, 165),
                Size = new Size(680, 60),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.White,
                ForeColor = Color.DarkGreen
            };

            Label lblTranslated = new Label()
            {
                Text = "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:",
                Location = new Point(20, 240),
                Size = new Size(200, 20),
                ForeColor = Color.Black
            };

            tbTranslatedText = new TextBox()
            {
                Location = new Point(20, 265),
                Size = new Size(680, 60),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.White,
                ForeColor = Color.DarkBlue
            };

            gbMonitoring.Controls.AddRange(new Control[] 
            { 
                lblStatus, lblLatency,
                lblMicLevel, pbMicLevel,
                lblSpeakerLevel, pbSpeakerLevel,
                lblIncoming, tbIncomingText,
                lblTranslated, tbTranslatedText
            });
            
            monitoringTab.Controls.Add(gbMonitoring);
            mainTabControl?.TabPages.Add(monitoringTab);
        }

        private void CreateUniversalTab()
        {
            TabPage universalTab = new TabPage("üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º");
            
            gbUniversalMode = new GroupBox()
            {
                Text = "üöÄ –°–∏—Å—Ç–µ–º–Ω—ã–π –∞—É–¥–∏–æ–ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                Location = new Point(10, 10),
                Size = new Size(740, 450),
                ForeColor = Color.Black
            };

            // Info label
            Label lblInfo = new Label()
            {
                Text = "üí° –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –∏–∑ –í–°–ï–• –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n" +
                       "   ‚Ä¢ Discord, Skype, Teams, –∏–≥—Ä—ã - –≤–µ—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n" +
                       "   ‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–∞–∂–¥–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ\n" +
                       "   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π VB-Cable –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                Location = new Point(20, 25),
                Size = new Size(700, 80),
                ForeColor = Color.DarkBlue,
                Font = new Font("Segoe UI", 9, FontStyle.Regular)
            };

            // VB-Cable status
            lblVBCableStatus = new Label()
            {
                Text = "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VB-Cable...",
                Location = new Point(20, 115),
                Size = new Size(350, 20),
                ForeColor = Color.Orange,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            // Physical devices section
            lblPhysicalDevices = new Label()
            {
                Text = "üéß –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
                Location = new Point(20, 145),
                Size = new Size(200, 20),
                ForeColor = Color.Black,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            Label lblPhysicalMic = new Label()
            {
                Text = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω:",
                Location = new Point(40, 170),
                Size = new Size(80, 20),
                ForeColor = Color.Black
            };

            cbPhysicalMicrophone = new ComboBox()
            {
                Location = new Point(125, 168),
                Size = new Size(250, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                BackColor = Color.White
            };

            Label lblPhysicalSpk = new Label()
            {
                Text = "–î–∏–Ω–∞–º–∏–∫–∏:",
                Location = new Point(40, 200),
                Size = new Size(80, 20),
                ForeColor = Color.Black
            };

            cbPhysicalSpeakers = new ComboBox()
            {
                Location = new Point(125, 198),
                Size = new Size(250, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                BackColor = Color.White
            };

            // Universal mode controls
            cbEnableUniversal = new CheckBox()
            {
                Text = "üåê –í–∫–ª—é—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
                Location = new Point(20, 240),
                Size = new Size(250, 25),
                ForeColor = Color.DarkGreen,
                Font = new Font("Segoe UI", 10, FontStyle.Bold)
            };
            cbEnableUniversal.CheckedChanged += OnUniversalModeToggle;

            btnStartUniversal = new Button()
            {
                Text = "üöÄ –í–∫–ª—é—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
                Location = new Point(20, 275),
                Size = new Size(200, 35),
                BackColor = Color.LightGreen,
                ForeColor = Color.DarkGreen,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                Enabled = false
            };
            btnStartUniversal.Click += OnStartUniversalClick;

            btnStopUniversal = new Button()
            {
                Text = "üõë –í—ã–∫–ª—é—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
                Location = new Point(230, 275),
                Size = new Size(200, 35),
                BackColor = Color.LightCoral,
                ForeColor = Color.DarkRed,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                Enabled = false
            };
            btnStopUniversal.Click += OnStopUniversalClick;

            btnToggleTranslation = new Button()
            {
                Text = "üéØ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
                Location = new Point(440, 275),
                Size = new Size(160, 35),
                BackColor = Color.LightBlue,
                ForeColor = Color.DarkBlue,
                Font = new Font("Segoe UI", 9, FontStyle.Bold),
                Enabled = false
            };
            btnToggleTranslation.Click += OnToggleTranslationClick;

            // Status
            lblUniversalStatus = new Label()
            {
                Text = "üìä –°—Ç–∞—Ç—É—Å: –í—ã–∫–ª—é—á–µ–Ω",
                Location = new Point(20, 325),
                Size = new Size(580, 20),
                ForeColor = Color.Gray,
                Font = new Font("Segoe UI", 9, FontStyle.Bold)
            };

            // Log
            Label lblUniversalLog = new Label()
            {
                Text = "üìù –ñ—É—Ä–Ω–∞–ª —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:",
                Location = new Point(20, 355),
                Size = new Size(300, 20),
                ForeColor = Color.Black
            };

            tbUniversalLog = new TextBox()
            {
                Location = new Point(20, 380),
                Size = new Size(700, 60),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical,
                ReadOnly = true,
                BackColor = Color.Black,
                ForeColor = Color.LimeGreen,
                Font = new Font("Consolas", 9),
                Text = "üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É...\r\n"
            };

            gbUniversalMode.Controls.AddRange(new Control[] 
            { 
                lblInfo, lblVBCableStatus,
                lblPhysicalDevices,
                lblPhysicalMic, cbPhysicalMicrophone,
                lblPhysicalSpk, cbPhysicalSpeakers,
                cbEnableUniversal,
                btnStartUniversal, btnStopUniversal, btnToggleTranslation,
                lblUniversalStatus,
                lblUniversalLog, tbUniversalLog
            });
            
            universalTab.Controls.Add(gbUniversalMode);
            mainTabControl?.TabPages.Add(universalTab);
            
            // Status update timer
            universalStatusTimer = new Timer()
            {
                Interval = 2000, // Update every 2 seconds
                Enabled = false
            };
            universalStatusTimer.Tick += OnUniversalStatusTick;
            
            // Initialize universal manager
            if (universalManager == null && settingManager != null)
            {
                universalManager = new UniversalAudioTranslateManager(settingManager);
                universalManager.OnLog += LogUniversalMessage;
                universalManager.OnUniversalModeChanged += OnUniversalModeStateChanged;
                universalManager.OnTranslationStateChanged += OnTranslationStateChanged;
            }
            
            // Load devices
            LoadUniversalDevices();
        }

        private void CreateControlButtons()
        {
            // Start/Stop controls
            btnStart = new Button()
            {
                Text = "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç",
                Location = new Point(10, 520),
                Size = new Size(80, 35),
                ForeColor = Color.Black,
                BackColor = Color.LightGreen
            };

            btnStop = new Button()
            {
                Text = "‚èπÔ∏è –°—Ç–æ–ø",
                Location = new Point(100, 520),
                Size = new Size(80, 35),
                ForeColor = Color.Black,
                BackColor = Color.LightCoral,
                Enabled = false
            };

            btnPause = new Button()
            {
                Text = "‚è∏Ô∏è –ü–∞—É–∑–∞",
                Location = new Point(190, 520),
                Size = new Size(80, 35),
                ForeColor = Color.Black,
                BackColor = Color.LightYellow,
                Enabled = false
            };

            // Dialog buttons
            btnOK = new Button()
            {
                Text = "OK",
                Location = new Point(550, 520),
                Size = new Size(80, 35),
                DialogResult = DialogResult.OK,
                ForeColor = Color.Black
            };

            btnCancel = new Button()
            {
                Text = "–û—Ç–º–µ–Ω–∞",
                Location = new Point(640, 520),
                Size = new Size(80, 35),
                DialogResult = DialogResult.Cancel,
                ForeColor = Color.Black
            };

            btnApply = new Button()
            {
                Text = "–ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                Location = new Point(450, 520),
                Size = new Size(90, 35),
                ForeColor = Color.Black
            };

            // Event handlers
            btnStart.Click += BtnStart_Click;
            btnStop.Click += BtnStop_Click;
            btnPause.Click += BtnPause_Click;
            btnApply.Click += BtnApply_Click;
            btnOK.Click += BtnOK_Click;

            this.Controls.AddRange(new Control[] 
            { 
                btnStart, btnStop, btnPause, 
                btnOK, btnCancel, btnApply 
            });
        }

        private void InitializeTranslationEngines()
        {
            if (cbTranslationEngine == null || settingManager == null)
                return;

            // Clear existing items
            cbTranslationEngine.Items.Clear();

            // Add LibreTranslate first (as per user request)
            cbTranslationEngine.Items.Add("LibreTranslate (–ª–æ–∫–∞–ª—å–Ω—ã–π)");

            // Add translation engines from main program
            // Based on Form1.Designer.cs TransType_Combobox.Items.AddRange
            string[] mainEngines = {
                "Google Translate (Basic)",     // google_url
                "Database",                     // db
                "Papago Web",                   // papago_web
                "Naver API",                    // naver
                "Google Sheets",                // google
                "DeepL Web",                    // deepl
                "DeepL API",                    // deeplApi
                "Gemini API",                   // gemini
                "ezTrans",                      // ezTrans
                "Custom API"                    // customApi
            };

            cbTranslationEngine.Items.AddRange(mainEngines);

            // Set default selection to current main app setting
            int currentMainEngine = (int)settingManager.NowTransType;
            // Map main engine index to Audio Translator index (offset by 1 due to LibreTranslate)
            cbTranslationEngine.SelectedIndex = currentMainEngine + 1;

            // If index is out of range, default to LibreTranslate
            if (cbTranslationEngine.SelectedIndex >= cbTranslationEngine.Items.Count)
                cbTranslationEngine.SelectedIndex = 0;
        }

        #region Event Handlers

        private void OpenMainAPISettings()
        {
            try
            {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                MessageBox.Show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫'.\n\n" +
                              "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∏:\n" +
                              "‚Ä¢ Google Translate API\n" +
                              "‚Ä¢ DeepL API\n" +
                              "‚Ä¢ Gemini API\n" +
                              "‚Ä¢ Naver API\n" +
                              "‚Ä¢ LibreTranslate (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
                              "API –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                              MessageBoxButtons.OK, 
                              MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnStart_Click(object? sender, EventArgs e)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("=== –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===");
                
                // Start AutoVoiceTranslator
                if (btnStart != null) btnStart.Enabled = false;
                if (btnStop != null) btnStop.Enabled = true;
                if (btnPause != null) btnPause.Enabled = true;
                if (lblStatus != null)
                {
                    lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω";
                    lblStatus.ForeColor = Color.LightGreen;
                }
                
                System.Diagnostics.Debug.WriteLine("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤...");
                System.Diagnostics.Debug.WriteLine($"pbMicLevel: {pbMicLevel != null}");
                System.Diagnostics.Debug.WriteLine($"pbSpeakerLevel: {pbSpeakerLevel != null}");
                System.Diagnostics.Debug.WriteLine($"cbMicrophone: {cbMicrophone != null}");
                System.Diagnostics.Debug.WriteLine($"cbSpeakers: {cbSpeakers != null}");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                StartMicrophoneMonitoring();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–Ω–∞–º–∏–∫–æ–≤
                StartSpeakerMonitoring();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                StartMonitoringTimer();
                
                isMonitoring = true;
                System.Diagnostics.Debug.WriteLine("=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù ===");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnStop_Click(object? sender, EventArgs e)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("=== –û–°–¢–ê–ù–û–í–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===");
                
                // Stop AutoVoiceTranslator
                if (btnStart != null) btnStart.Enabled = true;
                if (btnStop != null) btnStop.Enabled = false;
                if (btnPause != null) btnPause.Enabled = false;
                if (lblStatus != null)
                {
                    lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
                    lblStatus.ForeColor = Color.Red;
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                StopMonitoring();
                
                isMonitoring = false;
                System.Diagnostics.Debug.WriteLine("=== –ú–û–ù–ò–¢–û–†–ò–ù–ì –û–°–¢–ê–ù–û–í–õ–ï–ù ===");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void BtnPause_Click(object? sender, EventArgs e)
        {
            // Toggle pause
            if (btnPause?.Text.Contains("–ü–∞—É–∑–∞") == true)
            {
                btnPause.Text = "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å";
                if (lblStatus != null)
                {
                    lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –ü–∞—É–∑–∞";
                    lblStatus.ForeColor = Color.Yellow;
                }
            }
            else
            {
                if (btnPause != null) btnPause.Text = "‚è∏Ô∏è –ü–∞—É–∑–∞";
                if (lblStatus != null)
                {
                    lblStatus.Text = "–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω";
                    lblStatus.ForeColor = Color.LightGreen;
                }
            }
            
            // TODO: Implement pause logic
        }

        private void BtnTestSTT_Click(object? sender, EventArgs e)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("üß™ –¢–µ—Å—Ç STT: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è");
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–≤—É–∫–æ–º
                byte[] testBuffer = new byte[1024];
                for (int i = 0; i < testBuffer.Length; i++)
                {
                    testBuffer[i] = (byte)(128 + Math.Sin(i * 0.1) * 50); // –°–∏–Ω—É—Å–æ–∏–¥–∞
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                audioBuffer.AddRange(testBuffer);
                
                if (audioBuffer.Count > 0)
                {
                    ProcessCollectedAudio();
                    System.Diagnostics.Debug.WriteLine($"üß™ –¢–µ—Å—Ç STT: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {audioBuffer.Count} –±–∞–π—Ç –∞—É–¥–∏–æ");
                }
                else
                {
                    // –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç–æ–π, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
                    SimulateSTTResult("–¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç STT: {ex.Message}");
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ STT: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        // –ú–µ—Ç–æ–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞—É–¥–∏–æ
        private void StartMicrophoneMonitoring()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...");
                
                if (monitoringWaveIn != null)
                {
                    monitoringWaveIn.StopRecording();
                    monitoringWaveIn.Dispose();
                }

                monitoringWaveIn = new WaveInEvent();
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                int selectedMicDevice = cbMicrophone?.SelectedIndex ?? 0;
                if (selectedMicDevice >= 0 && selectedMicDevice < WaveInEvent.DeviceCount)
                {
                    monitoringWaveIn.DeviceNumber = selectedMicDevice;
                }
                
                monitoringWaveIn.WaveFormat = new WaveFormat(44100, 1);
                monitoringWaveIn.BufferMilliseconds = 50;
                
                monitoringWaveIn.DataAvailable += (sender, e) =>
                {
                    if (pbMicLevel == null || !isMonitoring) return;
                    
                    float max = 0;
                    for (int index = 0; index < e.BytesRecorded; index += 2)
                    {
                        short sample = (short)((e.Buffer[index + 1] << 8) | e.Buffer[index + 0]);
                        var sample32 = sample / 32768f;
                        if (sample32 < 0) sample32 = -sample32;
                        if (sample32 > max) max = sample32;
                    }
                    
                    var level = Math.Max(0, Math.Min(100, (int)(max * 100)));
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    if (pbMicLevel.InvokeRequired)
                    {
                        pbMicLevel.Invoke(new Action(() => pbMicLevel.Value = level));
                    }
                    else
                    {
                        pbMicLevel.Value = level;
                    }
                    
                    // STT: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏
                    ProcessAudioForSTT(e.Buffer, e.BytesRecorded, max);
                };
                
                monitoringWaveIn.StartRecording();
                System.Diagnostics.Debug.WriteLine("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}");
            }
        }

        private void StartSpeakerMonitoring()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤...");
                
                // –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–∏–∫—Å
                // –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º loopback —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                if (monitoringWaveOut != null)
                {
                    monitoringWaveOut.Stop();
                    monitoringWaveOut.Dispose();
                }

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                var waveProvider = new SineWaveProvider32();
                waveProvider.SetWaveFormat(44100, 1);
                waveProvider.Frequency = 0; // –ë–µ–∑ –∑–≤—É–∫–∞, —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

                monitoringWaveOut = new WaveOutEvent();
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–∏–Ω–∞–º–∏–∫–æ–≤
                int selectedSpeakerDevice = cbSpeakers?.SelectedIndex ?? 0;
                if (selectedSpeakerDevice >= 0 && selectedSpeakerDevice < WaveOut.DeviceCount)
                {
                    monitoringWaveOut.DeviceNumber = selectedSpeakerDevice;
                }

                monitoringWaveOut.Init(waveProvider);
                // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                
                System.Diagnostics.Debug.WriteLine("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∏–Ω–∞–º–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤: {ex.Message}");
            }
        }

        private void StartMonitoringTimer()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
                
                if (monitoringTimer != null)
                {
                    monitoringTimer.Stop();
                    monitoringTimer.Dispose();
                }

                monitoringTimer = new Timer();
                monitoringTimer.Interval = 100; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100–º—Å
                monitoringTimer.Tick += MonitoringTimer_Tick;
                monitoringTimer.Start();
                
                System.Diagnostics.Debug.WriteLine("–¢–∞–π–º–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
            }
        }

        private void MonitoringTimer_Tick(object? sender, EventArgs e)
        {
            try
            {
                if (!isMonitoring || pbSpeakerLevel == null) return;
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–Ω–∞–º–∏–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞
                Random random = new Random();
                int speakerLevel = random.Next(0, 50); // –°–ª—É—á–∞–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                
                if (pbSpeakerLevel.InvokeRequired)
                {
                    pbSpeakerLevel.Invoke(new Action(() => pbSpeakerLevel.Value = speakerLevel));
                }
                else
                {
                    pbSpeakerLevel.Value = speakerLevel;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
            }
        }

        private void StopMonitoring()
        {
            try
            {
                System.Diagnostics.Debug.WriteLine("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...");
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                if (monitoringTimer != null)
                {
                    monitoringTimer.Stop();
                    monitoringTimer.Dispose();
                    monitoringTimer = null;
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                if (monitoringWaveIn != null)
                {
                    monitoringWaveIn.StopRecording();
                    monitoringWaveIn.Dispose();
                    monitoringWaveIn = null;
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if (monitoringWaveOut != null)
                {
                    monitoringWaveOut.Stop();
                    monitoringWaveOut.Dispose();
                    monitoringWaveOut = null;
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã
                if (pbMicLevel != null)
                {
                    if (pbMicLevel.InvokeRequired)
                    {
                        pbMicLevel.Invoke(new Action(() => pbMicLevel.Value = 0));
                    }
                    else
                    {
                        pbMicLevel.Value = 0;
                    }
                }
                
                if (pbSpeakerLevel != null)
                {
                    if (pbSpeakerLevel.InvokeRequired)
                    {
                        pbSpeakerLevel.Invoke(new Action(() => pbSpeakerLevel.Value = 0));
                    }
                    else
                    {
                        pbSpeakerLevel.Value = 0;
                    }
                }
                
                System.Diagnostics.Debug.WriteLine("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
            }
        }

        // STT (Speech-to-Text) –º–µ—Ç–æ–¥—ã
        private void ProcessAudioForSTT(byte[] buffer, int bytesRecorded, float audioLevel)
        {
            try
            {
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 50 –≤—ã–∑–æ–≤–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 2.5 —Å–µ–∫—É–Ω–¥—ã)
                debugCounter++;
                if (debugCounter % 50 == 0)
                {
                    System.Diagnostics.Debug.WriteLine($"üîä –£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞: {audioLevel:F4}, –ü–æ—Ä–æ–≥: {voiceThreshold:F4}, –°–æ–±–∏—Ä–∞–µ–º: {isCollectingAudio}");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                bool isVoiceDetected = audioLevel > voiceThreshold;
                
                if (isVoiceDetected)
                {
                    // –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                    if (!isCollectingAudio)
                    {
                        isCollectingAudio = true;
                        audioBuffer.Clear();
                        System.Diagnostics.Debug.WriteLine($"üé§ –ù–∞—á–∞—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏... –£—Ä–æ–≤–µ–Ω—å: {audioLevel:F4}");
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        if (tbIncomingText != null)
                        {
                            if (tbIncomingText.InvokeRequired)
                            {
                                tbIncomingText.Invoke(new Action(() => tbIncomingText.Text = "üé§ –°–ª—É—à–∞—é..."));
                            }
                            else
                            {
                                tbIncomingText.Text = "üé§ –°–ª—É—à–∞—é...";
                            }
                        }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä
                    byte[] audioData = new byte[bytesRecorded];
                    Array.Copy(buffer, audioData, bytesRecorded);
                    audioBuffer.AddRange(audioData);
                    
                    lastVoiceActivity = DateTime.Now;
                }
                else if (isCollectingAudio)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ –±–µ–∑ –≥–æ–ª–æ—Å–∞
                    var silenceDuration = DateTime.Now - lastVoiceActivity;
                    if (silenceDuration.TotalMilliseconds > silenceDurationMs)
                    {
                        System.Diagnostics.Debug.WriteLine($"‚èπÔ∏è –ö–æ–Ω–µ—Ü —Ä–µ—á–∏ –ø–æ—Å–ª–µ {silenceDuration.TotalMilliseconds}–º—Å —Ç–∏—à–∏–Ω—ã");
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                        ProcessCollectedAudio();
                        isCollectingAudio = false;
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ ProcessAudioForSTT: {ex.Message}");
            }
        }

        private void ProcessCollectedAudio()
        {
            try
            {
                if (audioBuffer.Count == 0) return;
                
                System.Diagnostics.Debug.WriteLine($"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ: {audioBuffer.Count} –±–∞–π—Ç");
                
                // –°–∏–º—É–ª—è—Ü–∏—è STT - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ STT API
                string recognizedText = SimulateSTT(audioBuffer.ToArray());
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if (tbIncomingText != null)
                {
                    if (tbIncomingText.InvokeRequired)
                    {
                        tbIncomingText.Invoke(new Action(() => tbIncomingText.Text = recognizedText));
                    }
                    else
                    {
                        tbIncomingText.Text = recognizedText;
                    }
                }
                
                System.Diagnostics.Debug.WriteLine($"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {recognizedText}");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø 3: –ø–µ—Ä–µ–≤–æ–¥
                ProcessTranslation(recognizedText);
                
                // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                audioBuffer.Clear();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ ProcessCollectedAudio: {ex.Message}");
            }
        }

        private string SimulateSTT(byte[] audioData)
        {
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è STT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ Windows Speech API, Google Speech API –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ STT
            
            string[] testPhrases = {
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
                "–ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞?", 
                "–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞",
                "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"
            };
            
            Random random = new Random();
            string simulatedText = testPhrases[random.Next(testPhrases.Length)];
            
            return simulatedText;
        }

        private void SimulateSTTResult(string testText)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"üß™ –°–∏–º—É–ª—è—Ü–∏—è STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {testText}");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if (tbIncomingText != null)
                {
                    if (tbIncomingText.InvokeRequired)
                    {
                        tbIncomingText.Invoke(new Action(() => tbIncomingText.Text = testText));
                    }
                    else
                    {
                        tbIncomingText.Text = testText;
                    }
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø - –ø–µ—Ä–µ–≤–æ–¥
                ProcessTranslation(testText);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ STT: {ex.Message}");
            }
        }

        private void ProcessTranslation(string inputText)
        {
            try
            {
                if (string.IsNullOrEmpty(inputText)) return;
                
                System.Diagnostics.Debug.WriteLine($"üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥: {inputText}");
                
                // –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MORT TransManager
                string translatedText = SimulateTranslation(inputText);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                if (tbTranslatedText != null)
                {
                    if (tbTranslatedText.InvokeRequired)
                    {
                        tbTranslatedText.Invoke(new Action(() => tbTranslatedText.Text = translatedText));
                    }
                    else
                    {
                        tbTranslatedText.Text = translatedText;
                    }
                }
                
                System.Diagnostics.Debug.WriteLine($"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç: {translatedText}");
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ø 4: TTS
                ProcessTextToSpeech(translatedText);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ ProcessTranslation: {ex.Message}");
            }
        }

        private string SimulateTranslation(string inputText)
        {
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ MORT TransManager
            
            var translations = new Dictionary<string, string>
            {
                {"–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", "Hello, how are you?"},
                {"–ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞?", "What is this program?"},
                {"–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç", "Translate this text"},
                {"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞", "Voice translation test"},
                {"–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏", "Testing speech recognition system"}
            };
            
            if (translations.ContainsKey(inputText))
            {
                return translations[inputText];
            }
            
            return $"[EN] {inputText}"; // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
        }

        private void ProcessTextToSpeech(string textToSpeak)
        {
            try
            {
                if (string.IsNullOrEmpty(textToSpeak)) return;
                
                System.Diagnostics.Debug.WriteLine($"üîä –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ: {textToSpeak}");
                
                // –°–∏–º—É–ª—è—Ü–∏—è TTS - –≤ —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ TTS —Å–∏—Å—Ç–µ–º—ã
                SimulateTTS(textToSpeak);
                
                System.Diagnostics.Debug.WriteLine($"‚úÖ –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –≤ ProcessTextToSpeech: {ex.Message}");
            }
        }

        private void SimulateTTS(string text)
        {
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è TTS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏–∫–∏
            
            System.Diagnostics.Debug.WriteLine($"üîä TTS: {text}");
            
            // –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            Task.Run(() =>
            {
                for (int i = 0; i < 20; i++) // 2 —Å–µ–∫—É–Ω–¥—ã —Å–∏–º—É–ª—è—Ü–∏–∏
                {
                    if (pbSpeakerLevel != null && isMonitoring)
                    {
                        Random random = new Random();
                        int speakerLevel = random.Next(30, 80); // –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∏–Ω–∞–º–∏–∫–æ–≤
                        
                        if (pbSpeakerLevel.InvokeRequired)
                        {
                            pbSpeakerLevel.Invoke(new Action(() => pbSpeakerLevel.Value = speakerLevel));
                        }
                        else
                        {
                            pbSpeakerLevel.Value = speakerLevel;
                        }
                    }
                    System.Threading.Thread.Sleep(100);
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–∏–Ω–∞–º–∏–∫–æ–≤
                if (pbSpeakerLevel != null)
                {
                    if (pbSpeakerLevel.InvokeRequired)
                    {
                        pbSpeakerLevel.Invoke(new Action(() => pbSpeakerLevel.Value = 0));
                    }
                    else
                    {
                        pbSpeakerLevel.Value = 0;
                    }
                }
            });
        }

        // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å–∏–Ω—É—Å–æ–∏–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        private class SineWaveProvider32 : IWaveProvider
        {
            private int sample;
            private WaveFormat waveFormat;

            public SineWaveProvider32()
            {
                waveFormat = new WaveFormat(44100, 1);
            }

            public void SetWaveFormat(int sampleRate, int channels)
            {
                this.waveFormat = new WaveFormat(sampleRate, channels);
            }

            public float Frequency { get; set; }
            public float Amplitude { get; set; } = 0.25f;

            public WaveFormat WaveFormat => waveFormat;

            public int Read(byte[] buffer, int offset, int count)
            {
                int sampleRate = waveFormat.SampleRate;
                short[] waveData = new short[count / 2];
                int samplesPerSecond = sampleRate;
                
                for (int n = 0; n < waveData.Length; n++)
                {
                    if (Frequency == 0)
                    {
                        waveData[n] = 0;
                    }
                    else
                    {
                        waveData[n] = (short)(Amplitude * Math.Sin((2 * Math.PI * sample * Frequency) / samplesPerSecond) * short.MaxValue);
                    }
                    sample++;
                    if (sample >= samplesPerSecond) sample = 0;
                }
                
                Buffer.BlockCopy(waveData, 0, buffer, offset, count);
                return count;
            }
        }

        private void BtnApply_Click(object? sender, EventArgs e)
        {
            // Apply settings
            SaveSettings();
            ApplyTranslationEngineToMainApp();
            MessageBox.Show("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void BtnOK_Click(object? sender, EventArgs e)
        {
            // Save and close
            SaveSettings();
            ApplyTranslationEngineToMainApp();
            this.Close();
        }

        private void BtnTestTranslation_Click(object? sender, EventArgs e)
        {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
            TranslationTestForm testForm = new TranslationTestForm();
            testForm.ShowDialog();
        }

        private void BtnTestMicrophone_Click(object? sender, EventArgs e)
        {
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            MessageBox.Show("–ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞–∂–∞—Ç–∞!", "–û—Ç–ª–∞–¥–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
            if (sender is Button btn)
            {
                MessageBox.Show($"–ö–Ω–æ–ø–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: Visible={btn.Visible}, Enabled={btn.Enabled}, Text='{btn.Text}'", "–û—Ç–ª–∞–¥–∫–∞ –∫–Ω–æ–ø–∫–∏");
            }
            
            try
            {
                if (cbMicrophone?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string deviceName = cbMicrophone?.SelectedItem?.ToString() ?? "";
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º NAudio –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
                int deviceIndex = GetActualDeviceIndex(cbMicrophone?.SelectedIndex ?? 0, deviceName, true);
                
                using (var waveIn = new WaveInEvent())
                {
                    waveIn.DeviceNumber = deviceIndex;
                    waveIn.WaveFormat = new WaveFormat(44100, 1); // 44.1kHz, mono
                    
                    // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
                    var bufferedWaveProvider = new BufferedWaveProvider(waveIn.WaveFormat);
                    bool recordingStarted = false;
                    
                    waveIn.DataAvailable += (s, args) =>
                    {
                        if (!recordingStarted)
                        {
                            recordingStarted = true;
                            this.Invoke(() => {
                                MessageBox.Show($"–ú–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceName}' —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∞—É–¥–∏–æ—Å–∏–≥–Ω–∞–ª.", 
                                    "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            });
                        }
                        bufferedWaveProvider.AddSamples(args.Buffer, 0, args.BytesRecorded);
                    };
                    
                    waveIn.StartRecording();
                    
                    // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                    System.Threading.Thread.Sleep(2000);
                    
                    waveIn.StopRecording();
                    
                    if (!recordingStarted)
                    {
                        MessageBox.Show($"–ú–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceName}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏.", 
                            "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                
                Util.ShowLog($"Microphone test completed: {deviceName}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}", 
                    "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Util.ShowLog($"Microphone test error: {ex}");
            }
        }

        private void BtnTestSpeakers_Click(object? sender, EventArgs e)
        {
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            MessageBox.Show("–ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤ –Ω–∞–∂–∞—Ç–∞!", "–û—Ç–ª–∞–¥–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            try
            {
                if (cbSpeakers?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string deviceName = cbSpeakers?.SelectedItem?.ToString() ?? "";
                int deviceIndex = GetActualDeviceIndex(cbSpeakers?.SelectedIndex ?? 0, deviceName, false);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ (—Å–∏–Ω—É—Å–æ–∏–¥–∞ 440 Hz –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É)
                int sampleRate = 44100;
                int duration = 1; // —Å–µ–∫—É–Ω–¥–∞
                int samples = sampleRate * duration;
                
                float[] testSignal = new float[samples];
                for (int i = 0; i < samples; i++)
                {
                    testSignal[i] = (float)(Math.Sin(2 * Math.PI * 440 * i / sampleRate) * 0.3); // 440 Hz, 30% –≥—Ä–æ–º–∫–æ—Å—Ç–∏
                }
                
                using (var waveOut = new WaveOutEvent())
                {
                    waveOut.DeviceNumber = deviceIndex;
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ 16-bit PCM
                    var waveFormat = new WaveFormat(sampleRate, 16, 1);
                    var buffer = new byte[samples * 2];
                    
                    for (int i = 0; i < samples; i++)
                    {
                        short sample = (short)(testSignal[i] * short.MaxValue);
                        buffer[i * 2] = (byte)(sample & 0xFF);
                        buffer[i * 2 + 1] = (byte)((sample >> 8) & 0xFF);
                    }
                    
                    var memoryStream = new MemoryStream(buffer);
                    var rawSourceWaveStream = new RawSourceWaveStream(memoryStream, waveFormat);
                    
                    waveOut.Init(rawSourceWaveStream);
                    waveOut.Play();
                    
                    MessageBox.Show($"–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤—É–∫ —á–µ—Ä–µ–∑ '{deviceName}'.\n–í—ã –¥–æ–ª–∂–Ω—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–æ–Ω 440 Hz.", 
                        "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    
                    while (waveOut.PlaybackState == PlaybackState.Playing)
                    {
                        System.Threading.Thread.Sleep(100);
                    }
                }
                
                Util.ShowLog($"Speaker test completed: {deviceName}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: {ex.Message}", 
                    "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Util.ShowLog($"Speaker test error: {ex}");
            }
        }

        private void BtnTestVBCable_Click(object? sender, EventArgs e)
        {
            // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            MessageBox.Show("–ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç VB-Cable –Ω–∞–∂–∞—Ç–∞!", "–û—Ç–ª–∞–¥–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Information);
            
            try
            {
                if (cbVBCable?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                string deviceName = cbVBCable?.SelectedItem?.ToString() ?? "";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                bool foundVBCableInput = false;
                bool foundVBCableOutput = false;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ (CABLE Output)
                using (var deviceEnumerator = new MMDeviceEnumerator())
                {
                    var captureDevices = deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                    foreach (var device in captureDevices)
                    {
                        if (device.FriendlyName.ToLower().Contains("cable"))
                        {
                            foundVBCableOutput = true;
                            break;
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (CABLE Input)
                    var renderDevices = deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                    foreach (var device in renderDevices)
                    {
                        if (device.FriendlyName.ToLower().Contains("cable"))
                        {
                            foundVBCableInput = true;
                            break;
                        }
                    }
                }
                
                string testResult = $"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VB-Cable:\n\n";
                testResult += $"–í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {deviceName}\n";
                testResult += $"CABLE Input (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ): {(foundVBCableInput ? "‚úì –ù–∞–π–¥–µ–Ω" : "‚úó –ù–µ –Ω–∞–π–¥–µ–Ω")}\n";
                testResult += $"CABLE Output (–∑–∞–ø–∏—Å—å): {(foundVBCableOutput ? "‚úì –ù–∞–π–¥–µ–Ω" : "‚úó –ù–µ –Ω–∞–π–¥–µ–Ω")}\n\n";
                
                if (foundVBCableInput && foundVBCableOutput)
                {
                    testResult += "‚úì VB-Cable –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!";
                    MessageBox.Show(testResult, "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    testResult += "‚ö† VB-Cable –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n";
                    testResult += "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VB-Audio Virtual Cable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω.";
                    MessageBox.Show(testResult, "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                
                Util.ShowLog($"VB-Cable test completed: Input={foundVBCableInput}, Output={foundVBCableOutput}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VB-Cable: {ex.Message}", 
                    "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Util.ShowLog($"VB-Cable test error: {ex}");
            }
        }

        #endregion

        #region Settings Management

        private void LoadSettings()
        {
            try
            {
                // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                string settingsPath = "AutoVoiceTranslator_Settings.ini";
                if (!File.Exists(settingsPath))
                {
                    SaveDefaultSettings();
                    return;
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
                string[] lines = File.ReadAllLines(settingsPath);
                foreach (string line in lines)
                {
                    if (line.Contains("="))
                    {
                        string[] parts = line.Split('=');
                        if (parts.Length == 2)
                        {
                            string key = parts[0].Trim();
                            string value = parts[1].Trim();
                            
                            ApplySetting(key, value);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }

        private void SaveSettings()
        {
            try
            {
                string settingsPath = "AutoVoiceTranslator_Settings.ini";
                using (StreamWriter writer = new StreamWriter(settingsPath))
                {
                    writer.WriteLine("[AutoVoiceTranslator Settings]");
                    writer.WriteLine($"WorkMode={GetSelectedWorkMode()}");
                    
                    // STT Settings
                    writer.WriteLine($"STTEngine={cbSTTEngine?.SelectedIndex ?? 0}");
                    writer.WriteLine($"WhisperModel={cbWhisperModel?.SelectedIndex ?? 2}");
                    writer.WriteLine($"VoskModel={cbVoskModel?.SelectedIndex ?? 0}");
                    writer.WriteLine($"STTSensitivity={tbSTTSensitivity?.Value ?? 50}");
                    
                    // TTS Settings
                    writer.WriteLine($"TTSEngine={cbTTSEngine?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TTSVoiceRU={cbTTSVoiceRU?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TTSVoiceEN={cbTTSVoiceEN?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TTSSpeedRU={tbTTSSpeedRU?.Value ?? 100}");
                    writer.WriteLine($"TTSSpeedEN={tbTTSSpeedEN?.Value ?? 100}");
                    writer.WriteLine($"TTSVolumeRU={tbTTSVolumeRU?.Value ?? 100}");
                    writer.WriteLine($"TTSVolumeEN={tbTTSVolumeEN?.Value ?? 100}");
                    
                    // Audio Devices
                    writer.WriteLine($"Microphone={cbMicrophone?.SelectedIndex ?? 0}");
                    writer.WriteLine($"Speakers={cbSpeakers?.SelectedIndex ?? 0}");
                    writer.WriteLine($"Headphones={cbHeadphones?.SelectedIndex ?? 0}");
                    writer.WriteLine($"VBCable={cbVBCable?.SelectedIndex ?? 0}");
                    
                    // VAD Settings
                    writer.WriteLine($"EnableVAD={cbEnableVAD?.Checked ?? true}");
                    writer.WriteLine($"VADThreshold={tbVADThreshold?.Value ?? 50}");
                    writer.WriteLine($"MinDuration={tbMinDuration?.Value ?? 5}");
                    writer.WriteLine($"SilenceTimeout={tbSilenceTimeout?.Value ?? 20}");
                    
                    // Translation Settings
                    writer.WriteLine($"TranslationEngine={cbTranslationEngine?.SelectedIndex ?? 0}");
                    writer.WriteLine($"LibreTranslateURL={tbLibreTranslateURL?.Text ?? "http://localhost:5000"}");
                    writer.WriteLine($"SourceLanguage={cbSourceLanguage?.SelectedIndex ?? 0}");
                    writer.WriteLine($"TargetLanguage={cbTargetLanguage?.SelectedIndex ?? 0}");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ApplyTranslationEngineToMainApp()
        {
            if (settingManager == null || cbTranslationEngine == null)
                return;

            int selectedIndex = cbTranslationEngine.SelectedIndex;
            
            // Skip LibreTranslate (index 0) - it's Audio Translator specific
            if (selectedIndex == 0)
                return; // LibreTranslate - don't change main app setting
            
            // Map Audio Translator engine index to main app TransType
            // Audio Translator indices (offset by 1 due to LibreTranslate):
            // 1 = Google Translate (Basic) -> google_url
            // 2 = Database -> db  
            // 3 = Papago Web -> papago_web
            // 4 = Naver API -> naver
            // 5 = Google Sheets -> google
            // 6 = DeepL Web -> deepl
            // 7 = DeepL API -> deeplApi
            // 8 = Gemini API -> gemini
            // 9 = ezTrans -> ezTrans
            // 10 = Custom API -> customApi
            
            SettingManager.TransType newTransType = (SettingManager.TransType)(selectedIndex - 1);
            
            // Validate the enum value
            if (Enum.IsDefined(typeof(SettingManager.TransType), newTransType))
            {
                settingManager.NowTransType = newTransType;
                Util.ShowLog($"Audio Translator: Changed main app translation engine to {newTransType}");
            }
        }

        private void SaveDefaultSettings()
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            SaveSettings();
        }

        private string GetSelectedWorkMode()
        {
            if (rbModeOff?.Checked == true) return "Off";
            if (rbModeIncoming?.Checked == true) return "Incoming";
            if (rbModeOutgoing?.Checked == true) return "Outgoing";
            if (rbModeBidirectional?.Checked == true) return "Bidirectional";
            return "Off";
        }

        private void ApplySetting(string key, string value)
        {
            try
            {
                switch (key)
                {
                    case "WorkMode":
                        SetWorkMode(value);
                        break;
                    case "STTEngine":
                        if (cbSTTEngine != null && int.TryParse(value, out int sttEngine))
                            cbSTTEngine.SelectedIndex = Math.Max(0, Math.Min(sttEngine, cbSTTEngine.Items.Count - 1));
                        break;
                    case "WhisperModel":
                        if (cbWhisperModel != null && int.TryParse(value, out int whisperModel))
                            cbWhisperModel.SelectedIndex = Math.Max(0, Math.Min(whisperModel, cbWhisperModel.Items.Count - 1));
                        break;
                    case "VoskModel":
                        if (cbVoskModel != null && int.TryParse(value, out int voskModel))
                            cbVoskModel.SelectedIndex = Math.Max(0, Math.Min(voskModel, cbVoskModel.Items.Count - 1));
                        break;
                    case "STTSensitivity":
                        if (tbSTTSensitivity != null && int.TryParse(value, out int sttSens))
                            tbSTTSensitivity.Value = Math.Max(0, Math.Min(sttSens, 100));
                        break;
                    case "TTSEngine":
                        if (cbTTSEngine != null && int.TryParse(value, out int ttsEngine))
                            cbTTSEngine.SelectedIndex = Math.Max(0, Math.Min(ttsEngine, cbTTSEngine.Items.Count - 1));
                        break;
                    case "TTSVoiceRU":
                        if (cbTTSVoiceRU != null && int.TryParse(value, out int ttsVoiceRU))
                            cbTTSVoiceRU.SelectedIndex = Math.Max(0, Math.Min(ttsVoiceRU, cbTTSVoiceRU.Items.Count - 1));
                        break;
                    case "TTSVoiceEN":
                        if (cbTTSVoiceEN != null && int.TryParse(value, out int ttsVoiceEN))
                            cbTTSVoiceEN.SelectedIndex = Math.Max(0, Math.Min(ttsVoiceEN, cbTTSVoiceEN.Items.Count - 1));
                        break;
                    case "TTSSpeedRU":
                        if (tbTTSSpeedRU != null && int.TryParse(value, out int speedRU))
                            tbTTSSpeedRU.Value = Math.Max(10, Math.Min(speedRU, 200));
                        break;
                    case "TTSSpeedEN":
                        if (tbTTSSpeedEN != null && int.TryParse(value, out int speedEN))
                            tbTTSSpeedEN.Value = Math.Max(10, Math.Min(speedEN, 200));
                        break;
                    case "TTSVolumeRU":
                        if (tbTTSVolumeRU != null && int.TryParse(value, out int volumeRU))
                            tbTTSVolumeRU.Value = Math.Max(0, Math.Min(volumeRU, 100));
                        break;
                    case "TTSVolumeEN":
                        if (tbTTSVolumeEN != null && int.TryParse(value, out int volumeEN))
                            tbTTSVolumeEN.Value = Math.Max(0, Math.Min(volumeEN, 100));
                        break;
                    case "Microphone":
                        if (cbMicrophone != null && int.TryParse(value, out int mic))
                            cbMicrophone.SelectedIndex = Math.Max(0, Math.Min(mic, cbMicrophone.Items.Count - 1));
                        break;
                    case "Speakers":
                        if (cbSpeakers != null && int.TryParse(value, out int speakers))
                            cbSpeakers.SelectedIndex = Math.Max(0, Math.Min(speakers, cbSpeakers.Items.Count - 1));
                        break;
                    case "Headphones":
                        if (cbHeadphones != null && int.TryParse(value, out int headphones))
                            cbHeadphones.SelectedIndex = Math.Max(0, Math.Min(headphones, cbHeadphones.Items.Count - 1));
                        break;
                    case "VBCable":
                        if (cbVBCable != null && int.TryParse(value, out int vbcable))
                            cbVBCable.SelectedIndex = Math.Max(0, Math.Min(vbcable, cbVBCable.Items.Count - 1));
                        break;
                    case "EnableVAD":
                        if (cbEnableVAD != null && bool.TryParse(value, out bool enableVAD))
                            cbEnableVAD.Checked = enableVAD;
                        break;
                    case "VADThreshold":
                        if (tbVADThreshold != null && int.TryParse(value, out int vadThreshold))
                            tbVADThreshold.Value = Math.Max(10, Math.Min(vadThreshold, 95));
                        break;
                    case "MinDuration":
                        if (tbMinDuration != null && int.TryParse(value, out int minDuration))
                            tbMinDuration.Value = Math.Max(1, Math.Min(minDuration, 30));
                        break;
                    case "SilenceTimeout":
                        if (tbSilenceTimeout != null && int.TryParse(value, out int silenceTimeout))
                            tbSilenceTimeout.Value = Math.Max(5, Math.Min(silenceTimeout, 100));
                        break;
                    case "TranslationEngine":
                        if (cbTranslationEngine != null && int.TryParse(value, out int transEngine))
                            cbTranslationEngine.SelectedIndex = Math.Max(0, Math.Min(transEngine, cbTranslationEngine.Items.Count - 1));
                        break;
                    case "LibreTranslateURL":
                        if (tbLibreTranslateURL != null)
                            tbLibreTranslateURL.Text = value;
                        break;
                    case "SourceLanguage":
                        if (cbSourceLanguage != null && int.TryParse(value, out int sourceLang))
                            cbSourceLanguage.SelectedIndex = Math.Max(0, Math.Min(sourceLang, cbSourceLanguage.Items.Count - 1));
                        break;
                    case "TargetLanguage":
                        if (cbTargetLanguage != null && int.TryParse(value, out int targetLang))
                            cbTargetLanguage.SelectedIndex = Math.Max(0, Math.Min(targetLang, cbTargetLanguage.Items.Count - 1));
                        break;
                }
            }
            catch (Exception ex)
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                System.Diagnostics.Debug.WriteLine($"Error applying setting {key}={value}: {ex.Message}");
            }
        }

        private void SetWorkMode(string mode)
        {
            switch (mode)
            {
                case "Off":
                    if (rbModeOff != null) rbModeOff.Checked = true;
                    break;
                case "Incoming":
                    if (rbModeIncoming != null) rbModeIncoming.Checked = true;
                    break;
                case "Outgoing":
                    if (rbModeOutgoing != null) rbModeOutgoing.Checked = true;
                    break;
                case "Bidirectional":
                    if (rbModeBidirectional != null) rbModeBidirectional.Checked = true;
                    break;
                default:
                    if (rbModeOff != null) rbModeOff.Checked = true;
                    break;
            }
        }

        #endregion

        private void LoadAudioDevices()
        {
            // –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            string logPath = Path.Combine(Environment.CurrentDirectory, "audio_debug.log");
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ UI-–ø–æ—Ç–æ–∫–µ
                bool isUIThread = !this.InvokeRequired;
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] LoadAudioDevices() started in UI thread: {isUIThread}\n");
                
                // –ï—Å–ª–∏ –Ω–µ –≤ UI-–ø–æ—Ç–æ–∫–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ Invoke
                if (this.InvokeRequired)
                {
                    this.Invoke(new Action(LoadAudioDevices));
                    return;
                }
                
                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                System.Diagnostics.Debug.WriteLine("LoadAudioDevices() started");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] LoadAudioDevices() started\n");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ComboBox-—ã –Ω–µ —Ä–∞–≤–Ω—ã null
                System.Diagnostics.Debug.WriteLine($"ComboBox states - Microphone: {cbMicrophone != null}, Speakers: {cbSpeakers != null}, Headphones: {cbHeadphones != null}, VBCable: {cbVBCable != null}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] ComboBox states - Microphone: {cbMicrophone != null}, Speakers: {cbSpeakers != null}, Headphones: {cbHeadphones != null}, VBCable: {cbVBCable != null}\n");
                
                // –û—á–∏—â–∞–µ–º –≤—Å–µ ComboBox
                cbMicrophone?.Items.Clear();
                cbSpeakers?.Items.Clear();
                cbHeadphones?.Items.Clear();
                cbVBCable?.Items.Clear();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
                int waveInCount = WaveIn.DeviceCount;
                System.Diagnostics.Debug.WriteLine($"WaveIn.DeviceCount = {waveInCount}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] WaveIn.DeviceCount = {waveInCount}\n");
                
                for (int i = 0; i < waveInCount; i++)
                {
                    var deviceInfo = WaveIn.GetCapabilities(i);
                    string deviceName = $"{deviceInfo.ProductName} (ID:{i})";
                    System.Diagnostics.Debug.WriteLine($"Adding WaveIn device: {deviceName}");
                    File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Adding WaveIn device: {deviceName}\n");
                    cbMicrophone?.Items.Add(deviceName);
                    cbVBCable?.Items.Add(deviceName);
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–∏–Ω–∞–º–∏–∫–∏/–Ω–∞—É—à–Ω–∏–∫–∏)
                int waveOutCount = WaveOut.DeviceCount;
                System.Diagnostics.Debug.WriteLine($"WaveOut.DeviceCount = {waveOutCount}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] WaveOut.DeviceCount = {waveOutCount}\n");
                
                for (int i = 0; i < waveOutCount; i++)
                {
                    var deviceInfo = WaveOut.GetCapabilities(i);
                    string deviceName = $"{deviceInfo.ProductName} (ID:{i})";
                    System.Diagnostics.Debug.WriteLine($"Adding WaveOut device: {deviceName}");
                    File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Adding WaveOut device: {deviceName}\n");
                    cbSpeakers?.Items.Add(deviceName);
                    cbHeadphones?.Items.Add(deviceName);
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                System.Diagnostics.Debug.WriteLine("Adding default devices");
                cbMicrophone?.Items.Insert(0, "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbSpeakers?.Items.Insert(0, "–î–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbHeadphones?.Items.Insert(0, "–ù–∞—É—à–Ω–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbVBCable?.Items.Insert(0, "VB-Cable –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                System.Diagnostics.Debug.WriteLine("Setting default selections");
                if (cbMicrophone?.Items.Count > 0) cbMicrophone.SelectedIndex = 0;
                if (cbSpeakers?.Items.Count > 0) cbSpeakers.SelectedIndex = 0;
                if (cbHeadphones?.Items.Count > 0) cbHeadphones.SelectedIndex = 0;
                if (cbVBCable?.Items.Count > 0) cbVBCable.SelectedIndex = 0;
                
                System.Diagnostics.Debug.WriteLine($"Final counts - Microphone: {cbMicrophone?.Items.Count}, Speakers: {cbSpeakers?.Items.Count}, Headphones: {cbHeadphones?.Items.Count}, VBCable: {cbVBCable?.Items.Count}");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Final counts - Microphone: {cbMicrophone?.Items.Count}, Speakers: {cbSpeakers?.Items.Count}, Headphones: {cbHeadphones?.Items.Count}, VBCable: {cbVBCable?.Items.Count}\n");
                System.Diagnostics.Debug.WriteLine("LoadAudioDevices() completed successfully");
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] LoadAudioDevices() completed successfully\n");
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                cbMicrophone?.Refresh();
                cbSpeakers?.Refresh();
                cbHeadphones?.Refresh();
                cbVBCable?.Refresh();
                this.Refresh();
                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] UI refresh completed\n");

                // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å WASAPI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API)
                try
                {
                    using (var enumerator = new MMDeviceEnumerator())
                    {
                        // –í—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        var inputDevices = enumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                        foreach (var device in inputDevices)
                        {
                            string deviceName = $"{device.FriendlyName} (WASAPI)";
                            if (cbMicrophone != null && !cbMicrophone.Items.Contains(deviceName))
                                cbMicrophone.Items.Add(deviceName);
                            if (cbVBCable != null && !cbVBCable.Items.Contains(deviceName))
                                cbVBCable.Items.Add(deviceName);
                        }

                        // –í—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                        var outputDevices = enumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                        foreach (var device in outputDevices)
                        {
                            string deviceName = $"{device.FriendlyName} (WASAPI)";
                            if (cbSpeakers != null && !cbSpeakers.Items.Contains(deviceName))
                                cbSpeakers.Items.Add(deviceName);
                            if (cbHeadphones != null && !cbHeadphones.Items.Contains(deviceName))
                                cbHeadphones.Items.Add(deviceName);
                        }
                    }
                }
                catch (Exception ex)
                {
                    // WASAPI –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
                    System.Diagnostics.Debug.WriteLine($"WASAPI enumeration failed: {ex.Message}");
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (cbMicrophone?.Items.Count > 0) cbMicrophone.SelectedIndex = 0;
                if (cbSpeakers?.Items.Count > 0) cbSpeakers.SelectedIndex = 0;
                if (cbHeadphones?.Items.Count > 0) cbHeadphones.SelectedIndex = 0;
                if (cbVBCable?.Items.Count > 0) cbVBCable.SelectedIndex = 0;
            }
            catch (Exception ex)
            {
                string logFilePath = Path.Combine(Environment.CurrentDirectory, "audio_debug.log");
                System.Diagnostics.Debug.WriteLine($"Exception in LoadAudioDevices: {ex.Message}");
                File.AppendAllText(logFilePath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Exception in LoadAudioDevices: {ex.Message}\n");
                File.AppendAllText(logFilePath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Stack trace: {ex.StackTrace}\n");
                
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –±–∞–∑–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                cbMicrophone?.Items.Add("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbSpeakers?.Items.Add("–î–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbHeadphones?.Items.Add("–ù–∞—É—à–Ω–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                cbVBCable?.Items.Add("VB-Cable");
                
                if (cbMicrophone?.Items.Count > 0) cbMicrophone.SelectedIndex = 0;
                if (cbSpeakers?.Items.Count > 0) cbSpeakers.SelectedIndex = 0;
                if (cbHeadphones?.Items.Count > 0) cbHeadphones.SelectedIndex = 0;
                if (cbVBCable?.Items.Count > 0) cbVBCable.SelectedIndex = 0;
            }
        }

        private void OnClick_TestAllAudioDevices(object? sender, EventArgs e)
        {
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                TestAudioDevices.TestDeviceEnumeration();
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                string message = TestAudioDevices.GetDeviceEnumerationResults();
                MessageBox.Show(message, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤", 
                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                LoadAudioDevices();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        #region Audio Device Testing Methods
        
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å NAudio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–º–±–æ–±–æ–∫—Å–∞
        /// </summary>
        /// <param name="comboBoxIndex">–ò–Ω–¥–µ–∫—Å –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ</param>
        /// <param name="selectedText">–¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞</param>
        /// <param name="isInputDevice">true –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã), false –¥–ª—è –≤—ã–≤–æ–¥–∞</param>
        /// <returns>–†–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å NAudio —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ -1 –µ—Å–ª–∏ –æ—à–∏–±–∫–∞</returns>
        private int GetActualDeviceIndex(int comboBoxIndex, string selectedText, bool isInputDevice)
        {
            try
            {
                System.Diagnostics.Debug.WriteLine($"GetActualDeviceIndex: comboBoxIndex={comboBoxIndex}, selectedText='{selectedText}', isInputDevice={isInputDevice}");
                
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
                if (comboBoxIndex == 0 && selectedText.Contains("–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"))
                {
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å -1 –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (NAudio –∏—Å–ø–æ–ª—å–∑—É–µ—Ç -1 –¥–ª—è default device)
                    System.Diagnostics.Debug.WriteLine("Returning -1 for default device");
                    return -1;
                }
                
                // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Ç–µ–∫—Å—Ç–µ –≤–∏–¥–∞ "(ID:X)"
                var match = System.Text.RegularExpressions.Regex.Match(selectedText, @"\(ID:(\d+)\)");
                if (match.Success && int.TryParse(match.Groups[1].Value, out int realIndex))
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                    int maxCount = isInputDevice ? WaveIn.DeviceCount : WaveOut.DeviceCount;
                    if (realIndex >= 0 && realIndex < maxCount)
                    {
                        System.Diagnostics.Debug.WriteLine($"Found ID in text: {realIndex}");
                        return realIndex;
                    }
                    else
                    {
                        System.Diagnostics.Debug.WriteLine($"ID {realIndex} is out of range (0-{maxCount-1})");
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω–¥–µ–∫—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å
                // –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", –ø–æ—ç—Ç–æ–º—É –≤—ã—á–∏—Ç–∞–µ–º 1
                int calculatedIndex = comboBoxIndex - 1;
                int deviceCount = isInputDevice ? WaveIn.DeviceCount : WaveOut.DeviceCount;
                
                System.Diagnostics.Debug.WriteLine($"Calculated index: {calculatedIndex}, device count: {deviceCount}");
                
                if (calculatedIndex >= 0 && calculatedIndex < deviceCount)
                {
                    System.Diagnostics.Debug.WriteLine($"Using calculated index: {calculatedIndex}");
                    return calculatedIndex;
                }
                
                System.Diagnostics.Debug.WriteLine("Failed to determine device index");
                return -1; // –û—à–∏–±–∫–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error in GetActualDeviceIndex: {ex.Message}");
                return -1;
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        /// </summary>
        private async Task TestMicrophoneDevice()
        {
            try
            {
                if (cbMicrophone?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                int deviceIndex = GetActualDeviceIndex(cbMicrophone!.SelectedIndex, cbMicrophone.SelectedItem?.ToString() ?? "", true);
                string selectedDeviceName = cbMicrophone.SelectedItem?.ToString() ?? "";
                
                System.Diagnostics.Debug.WriteLine($"TestMicrophoneDevice: selectedIndex={cbMicrophone.SelectedIndex}, deviceIndex={deviceIndex}, selectedText='{selectedDeviceName}'");
                
                string deviceDisplayName;
                if (deviceIndex == -1)
                {
                    deviceDisplayName = "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é";
                }
                else
                {
                    if (deviceIndex < 0 || deviceIndex >= WaveIn.DeviceCount)
                    {
                        MessageBox.Show($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceIndex}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: 0-{WaveIn.DeviceCount - 1}", 
                            "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    
                    var deviceCaps = WaveIn.GetCapabilities(deviceIndex);
                    deviceDisplayName = deviceCaps.ProductName;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º (—Ç–æ–ª—å–∫–æ VB-Cable, –ù–ï Voicemeeter)
                bool isVirtualDevice = (selectedDeviceName.Contains("CABLE") || 
                                      selectedDeviceName.Contains("VB-Audio")) &&
                                      !selectedDeviceName.Contains("Voicemeeter") &&
                                      !selectedDeviceName.Contains("VoiceMeeter");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                string message;
                if (isVirtualDevice)
                {
                    message = $"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:\n{deviceDisplayName}\n\n" +
                             "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥, " +
                             "–∑–∞—Ç–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.\n\n" +
                             "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –û–ö.";
                }
                else
                {
                    message = $"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:\n{deviceDisplayName}\n\n" +
                             "–ë—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –ú–û–ù–ò–¢–û–†–ò–ù–ì –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥.\n" +
                             "–í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ —Å–ª—ã—à–∞—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫–∞—Ö!\n\n" +
                             "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –û–ö.";
                }
                                
                if (MessageBox.Show(message, "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information) == DialogResult.Cancel)
                {
                    return;
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                bool success;
                if (isVirtualDevice)
                {
                    // –î–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ VB-Cable) –∏—Å–ø–æ–ª—å–∑—É–µ–º playback –º–µ—Ç–æ–¥
                    success = await audioTester!.TestMicrophoneWithPlaybackAsync(deviceIndex, -1, 3);
                }
                else
                {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–Ω–æ–º
                    int speakerDeviceIndex = -1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                    if (cbSpeakers?.SelectedIndex >= 0 && cbSpeakers?.SelectedItem != null)
                    {
                        speakerDeviceIndex = GetActualDeviceIndex(cbSpeakers.SelectedIndex, cbSpeakers.SelectedItem.ToString() ?? "", false);
                        System.Diagnostics.Debug.WriteLine($"Using speakers device index: {speakerDeviceIndex} ({cbSpeakers.SelectedItem})");
                    }
                    else if (cbHeadphones?.SelectedIndex >= 0 && cbHeadphones?.SelectedItem != null)
                    {
                        speakerDeviceIndex = GetActualDeviceIndex(cbHeadphones.SelectedIndex, cbHeadphones.SelectedItem.ToString() ?? "", false);
                        System.Diagnostics.Debug.WriteLine($"Using headphones device index: {speakerDeviceIndex} ({cbHeadphones.SelectedItem})");
                    }
                    
                    // –°–ù–ê–ß–ê–õ–ê —Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–Ω–æ–º
                    if (MessageBox.Show($"–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–±–æ—Ç—É –¥–∏–Ω–∞–º–∏–∫–æ–≤.\n\n–í—ã –¥–æ–ª–∂–Ω—ã —É—Å–ª—ã—à–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
                        "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        bool speakerTest = await audioTester!.TestSpeakersAsync(speakerDeviceIndex, 1000, 2);
                        if (!speakerTest)
                        {
                            MessageBox.Show("‚ùå –î–∏–Ω–∞–º–∏–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n- –í—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n- –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤ Windows\n- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤", 
                                "–û—à–∏–±–∫–∞ –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            return;
                        }
                        
                        MessageBox.Show("‚úÖ –î–∏–Ω–∞–º–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω.", 
                            "–î–∏–Ω–∞–º–∏–∫–∏ OK", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    
                    System.Diagnostics.Debug.WriteLine($"Testing microphone {deviceIndex} with speaker {speakerDeviceIndex}");
                    success = await audioTester!.TestMicrophoneWithRealTimeMonitoringAsync(deviceIndex, speakerDeviceIndex, 3);
                }
                
                if (success)
                {
                    if (isVirtualDevice)
                    {
                        MessageBox.Show($"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceDisplayName}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                       "–ï—Å–ª–∏ –≤—ã —Å–ª—ã—à–∞–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∏–Ω–∞–º–∏–∫–∏, " +
                                       "VB-Cable –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è –∞—É–¥–∏–æ –ø–µ—Ä–µ–≤–æ–¥–∞.", 
                                       "–¢–µ—Å—Ç VB-Cable —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                    else
                    {
                        MessageBox.Show($"‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω '{deviceDisplayName}' —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                       "–ï—Å–ª–∏ –≤—ã —Å–ª—ã—à–∞–ª–∏ —Å–≤–æ–π –≥–æ–ª–æ—Å –≤ –¥–∏–Ω–∞–º–∏–∫–∞—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, " +
                                       "–º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", 
                                       "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    string errorMessage = isVirtualDevice ? 
                        $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VB-Cable '{deviceDisplayName}'.\n\n" +
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É VB-Cable –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ –¥—Ä–∞–π–≤–µ—Ä–∞." :
                        $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ '{deviceDisplayName}'.\n\n" +
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.";
                        
                    MessageBox.Show(errorMessage, "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∏–Ω–∞–º–∏–∫–æ–≤
        /// </summary>
        private async Task TestSpeakersDevice()
        {
            try
            {
                if (cbSpeakers?.SelectedIndex < 0)
                {
                    MessageBox.Show("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–Ω–∞–º–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.", 
                        "–î–∏–Ω–∞–º–∏–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                int deviceIndex = GetActualDeviceIndex(cbSpeakers!.SelectedIndex, cbSpeakers.SelectedItem?.ToString() ?? "", false);
                string selectedDeviceName = cbSpeakers.SelectedItem?.ToString() ?? "";
                
                System.Diagnostics.Debug.WriteLine($"TestSpeakersDevice: selectedIndex={cbSpeakers.SelectedIndex}, deviceIndex={deviceIndex}, selectedText='{selectedDeviceName}'");
                
                string deviceDisplayName;
                if (deviceIndex == -1)
                {
                    deviceDisplayName = "–î–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é";
                }
                else
                {
                    if (deviceIndex < 0 || deviceIndex >= WaveOut.DeviceCount)
                    {
                        MessageBox.Show($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {deviceIndex}. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: 0-{WaveOut.DeviceCount - 1}", 
                            "–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    }
                    
                    var deviceCaps = WaveOut.GetCapabilities(deviceIndex);
                    deviceDisplayName = deviceCaps.ProductName;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                string message = $"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤:\n{deviceDisplayName}\n\n" +
                                "–ë—É–¥–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω 440Hz –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥.\n\n" +
                                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≥—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.";
                                
                if (MessageBox.Show(message, "–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏–∫–æ–≤", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information) == DialogResult.Cancel)
                {
                    return;
                }
                
                bool success = await audioTester!.TestSpeakersAsync(deviceIndex, 440.0f, 3);
                
                if (success)
                {
                    MessageBox.Show($"‚úÖ –î–∏–Ω–∞–º–∏–∫–∏ '{deviceDisplayName}' —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                   "–ï—Å–ª–∏ –≤—ã —Å–ª—ã—à–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–Ω, –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", 
                                   "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤ '{deviceDisplayName}'.\n\n" +
                                   "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Windows.", 
                                   "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–æ–≤: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VB-Cable
        /// </summary>
        private async Task TestVBCableDevice()
        {
            try
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ VB-Cable
                string message = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VB-Cable:\n\n" +
                                "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ loopback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n" +
                                "1. –ü–æ–∏—Å–∫ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n" +
                                "2. –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ VB-Cable Output\n" +
                                "3. –ó–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–∞ —Å VB-Cable Input\n" +
                                "4. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n\n" +
                                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VB-Cable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.";
                                
                if (MessageBox.Show(message, "–¢–µ—Å—Ç VB-Cable", MessageBoxButtons.OKCancel, 
                    MessageBoxIcon.Information) == DialogResult.Cancel)
                {
                    return;
                }
                
                bool success = await audioTester!.TestVBCableAsync(5);
                
                if (success)
                {
                    MessageBox.Show("‚úÖ VB-Cable —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                                   "Loopback —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n" +
                                   "VB-Cable –≥–æ—Ç–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Discord/–∏–≥—Ä–∞—Ö.", 
                                   "–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("‚ùå VB-Cable –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n" +
                                   "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n" +
                                   "‚Ä¢ VB-Cable –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n" +
                                   "‚Ä¢ VB-Cable –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n" +
                                   "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏ –∞—É–¥–∏–æ\n\n" +
                                   "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VB-Cable –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", 
                                   "–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ VB-Cable: {ex.Message}", 
                    "–û—à–∏–±–∫–∞", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        
        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        /// </summary>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                audioTester?.Dispose();
                audioRouter?.Dispose();
                routingStatusTimer?.Dispose();
                universalManager?.Dispose();
                universalStatusTimer?.Dispose();
            }
            base.Dispose(disposing);
        }
        
        #endregion

        #region Audio Routing Methods

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void LoadRoutingDevices()
        {
            try
            {
                cbRoutingInput?.Items.Clear();
                cbRoutingOutput?.Items.Clear();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–º–∏–∫—Ä–æ—Ñ–æ–Ω—ã)
                for (int i = 0; i < WaveInEvent.DeviceCount; i++)
                {
                    var capability = WaveInEvent.GetCapabilities(i);
                    cbRoutingInput?.Items.Add($"{i}: {capability.ProductName}");
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–∏–Ω–∞–º–∏–∫–∏)
                for (int i = 0; i < WaveOut.DeviceCount; i++)
                {
                    var capability = WaveOut.GetCapabilities(i);
                    cbRoutingOutput?.Items.Add($"{i}: {capability.ProductName}");
                }

                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (cbRoutingInput?.Items.Count > 0)
                    cbRoutingInput.SelectedIndex = 0;
                if (cbRoutingOutput?.Items.Count > 0)
                    cbRoutingOutput.SelectedIndex = 0;

                LogMessage("üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnRoutingEnabledChanged(object? sender, EventArgs e)
        {
            bool enabled = cbEnableRouting?.Checked ?? false;
            
            cbRoutingInput!.Enabled = enabled;
            cbRoutingOutput!.Enabled = enabled;
            btnStartRouting!.Enabled = enabled && !audioRouter!.IsRouting;
            btnStopRouting!.Enabled = enabled && audioRouter!.IsRouting;

            if (enabled)
            {
                LogMessage("‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å'.");
            }
            else
            {
                if (audioRouter!.IsRouting)
                {
                    audioRouter.StopRouting();
                }
                LogMessage("‚ùå –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private async void OnStartRouting(object? sender, EventArgs e)
        {
            try
            {
                if (cbRoutingInput?.SelectedIndex < 0 || cbRoutingOutput?.SelectedIndex < 0)
                {
                    LogMessage("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–µ –∏ –≤—ã—Ö–æ–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.");
                    return;
                }

                int inputIndex = cbRoutingInput?.SelectedIndex ?? -1;
                int outputIndex = cbRoutingOutput?.SelectedIndex ?? -1;
                
                if (inputIndex < 0 || outputIndex < 0)
                {
                    LogMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤.");
                    return;
                }
                
                string inputName = cbRoutingInput?.SelectedItem?.ToString() ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                string outputName = cbRoutingOutput?.SelectedItem?.ToString() ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

                bool success = await audioRouter!.StartRoutingAsync(inputIndex, outputIndex, inputName, outputName);
                
                if (success)
                {
                    btnStartRouting!.Enabled = false;
                    btnStopRouting!.Enabled = true;
                    routingStatusTimer!.Enabled = true;
                    
                    LogMessage("üéâ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!");
                }
                else
                {
                    LogMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnStopRouting(object? sender, EventArgs e)
        {
            try
            {
                audioRouter?.StopRouting();
                btnStartRouting!.Enabled = true;
                btnStopRouting!.Enabled = false;
                routingStatusTimer!.Enabled = false;
                
                LogMessage("‚èπÔ∏è –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
            }
            catch (Exception ex)
            {
                LogMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void OnRoutingStatusTick(object? sender, EventArgs e)
        {
            try
            {
                if (audioRouter?.IsRouting == true)
                {
                    string stats = audioRouter.GetBufferStats();
                    LogMessage($"üìä –°—Ç–∞—Ç—É—Å: {audioRouter.CurrentRoute} | {stats}");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        /// </summary>
        private void LogMessage(string message)
        {
            try
            {
                if (tbRoutingLog?.InvokeRequired == true)
                {
                    tbRoutingLog.Invoke(new Action<string>(LogMessage), message);
                    return;
                }

                string timestamp = DateTime.Now.ToString("HH:mm:ss");
                string logEntry = $"[{timestamp}] {message}\r\n";
                
                tbRoutingLog?.AppendText(logEntry);
                tbRoutingLog?.ScrollToCaret();
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫)
                if (tbRoutingLog?.Lines.Length > 1000)
                {
                    var lines = tbRoutingLog.Lines;
                    var trimmedLines = new string[500];
                    Array.Copy(lines, lines.Length - 500, trimmedLines, 0, 500);
                    tbRoutingLog.Lines = trimmedLines;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {ex.Message}");
            }
        }

        #endregion

        #region Universal Mode Methods

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /// </summary>
        private void LoadUniversalDevices()
        {
            try
            {
                if (universalManager != null)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å VB-Cable
                    var vbCableInfo = universalManager.GetSystemStatus();
                    if (lblVBCableStatus != null)
                    {
                        if (vbCableInfo.Contains("VB-Cable"))
                        {
                            lblVBCableStatus.Text = "‚úÖ VB-Cable –æ–±–Ω–∞—Ä—É–∂–µ–Ω";
                            lblVBCableStatus.ForeColor = Color.DarkGreen;
                            if (btnStartUniversal != null)
                                btnStartUniversal.Enabled = true;
                        }
                        else
                        {
                            lblVBCableStatus.Text = "‚ùå VB-Cable –Ω–µ –Ω–∞–π–¥–µ–Ω - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VB-Cable";
                            lblVBCableStatus.ForeColor = Color.Red;
                        }
                    }
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                LoadPhysicalDevices();
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤
        /// </summary>
        private void LoadPhysicalDevices()
        {
            try
            {
                cbPhysicalMicrophone?.Items.Clear();
                cbPhysicalSpeakers?.Items.Clear();

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã
                for (int i = 0; i < WaveInEvent.DeviceCount; i++)
                {
                    var caps = WaveInEvent.GetCapabilities(i);
                    if (!caps.ProductName.ToLower().Contains("cable") && 
                        !caps.ProductName.ToLower().Contains("virtual"))
                    {
                        cbPhysicalMicrophone?.Items.Add($"{caps.ProductName} [{i}]");
                    }
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–Ω–∞–º–∏–∫–∏
                for (int i = 0; i < NAudio.Wave.WaveOut.DeviceCount; i++)
                {
                    var caps = NAudio.Wave.WaveOut.GetCapabilities(i);
                    if (!caps.ProductName.ToLower().Contains("cable") && 
                        !caps.ProductName.ToLower().Contains("virtual"))
                    {
                        cbPhysicalSpeakers?.Items.Add($"{caps.ProductName} [{i}]");
                    }
                }

                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if (cbPhysicalMicrophone?.Items.Count > 0)
                    cbPhysicalMicrophone.SelectedIndex = 0;
                
                if (cbPhysicalSpeakers?.Items.Count > 0)
                    cbPhysicalSpeakers.SelectedIndex = 0;

                LogUniversalMessage("üìã –§–∏–∑–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å
        /// </summary>
        private async void OnUniversalModeToggle(object? sender, EventArgs e)
        {
            try
            {
                if (cbEnableUniversal?.Checked == true)
                {
                    await StartUniversalMode();
                }
                else
                {
                    await StopUniversalMode();
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        /// </summary>
        private async void OnStartUniversalClick(object? sender, EventArgs e)
        {
            await StartUniversalMode();
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
        /// </summary>
        private async void OnStopUniversalClick(object? sender, EventArgs e)
        {
            await StopUniversalMode();
        }

        /// <summary>
        /// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        /// </summary>
        private async void OnToggleTranslationClick(object? sender, EventArgs e)
        {
            try
            {
                if (universalManager != null)
                {
                    await universalManager.ToggleTranslationAsync();
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /// </summary>
        private async Task StartUniversalMode()
        {
            try
            {
                if (universalManager == null) return;

                LogUniversalMessage("üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...");

                bool success = await universalManager.EnableUniversalModeAsync();
                
                if (success)
                {
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    if (btnStartUniversal != null) btnStartUniversal.Enabled = false;
                    if (btnStopUniversal != null) btnStopUniversal.Enabled = true;
                    if (btnToggleTranslation != null) btnToggleTranslation.Enabled = true;
                    if (cbEnableUniversal != null && !cbEnableUniversal.Checked) cbEnableUniversal.Checked = true;
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    if (universalStatusTimer != null) universalStatusTimer.Enabled = true;
                    
                    LogUniversalMessage("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
                }
                else
                {
                    LogUniversalMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º");
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /// </summary>
        private async Task StopUniversalMode()
        {
            try
            {
                if (universalManager == null) return;

                LogUniversalMessage("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...");

                bool success = await universalManager.DisableUniversalModeAsync();
                
                if (success)
                {
                    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    if (btnStartUniversal != null) btnStartUniversal.Enabled = true;
                    if (btnStopUniversal != null) btnStopUniversal.Enabled = false;
                    if (btnToggleTranslation != null) btnToggleTranslation.Enabled = false;
                    if (cbEnableUniversal != null && cbEnableUniversal.Checked) cbEnableUniversal.Checked = false;
                    
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                    if (universalStatusTimer != null) universalStatusTimer.Enabled = false;
                    
                    LogUniversalMessage("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
                }
                else
                {
                    LogUniversalMessage("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞");
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /// </summary>
        private void OnUniversalStatusTick(object? sender, EventArgs e)
        {
            try
            {
                if (universalManager != null && lblUniversalStatus != null)
                {
                    string status = universalManager.GetSystemStatus();
                    lblUniversalStatus.Text = status.Replace("\n", " | ");
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
                    if (universalManager.IsUniversalModeActive)
                    {
                        lblUniversalStatus.ForeColor = universalManager.IsTranslationActive ? Color.DarkGreen : Color.Orange;
                    }
                    else
                    {
                        lblUniversalStatus.ForeColor = Color.Gray;
                    }
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /// </summary>
        private void OnUniversalModeStateChanged(bool isActive)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.Invoke(new Action<bool>(OnUniversalModeStateChanged), isActive);
                    return;
                }

                if (btnStartUniversal != null) btnStartUniversal.Enabled = !isActive;
                if (btnStopUniversal != null) btnStopUniversal.Enabled = isActive;
                if (btnToggleTranslation != null) btnToggleTranslation.Enabled = isActive;
                
                if (cbEnableUniversal != null)
                {
                    cbEnableUniversal.CheckedChanged -= OnUniversalModeToggle;
                    cbEnableUniversal.Checked = isActive;
                    cbEnableUniversal.CheckedChanged += OnUniversalModeToggle;
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞
        /// </summary>
        private void OnTranslationStateChanged(bool isActive)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.Invoke(new Action<bool>(OnTranslationStateChanged), isActive);
                    return;
                }

                if (btnToggleTranslation != null)
                {
                    btnToggleTranslation.Text = isActive ? "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥" : "üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥";
                    btnToggleTranslation.BackColor = isActive ? Color.LightCoral : Color.LightBlue;
                    btnToggleTranslation.ForeColor = isActive ? Color.DarkRed : Color.DarkBlue;
                }
            }
            catch (Exception ex)
            {
                LogUniversalMessage($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {ex.Message}");
            }
        }

        /// <summary>
        /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        /// </summary>
        private void LogUniversalMessage(string message)
        {
            try
            {
                if (tbUniversalLog?.InvokeRequired == true)
                {
                    tbUniversalLog.Invoke(new Action<string>(LogUniversalMessage), message);
                    return;
                }

                string timestamp = DateTime.Now.ToString("HH:mm:ss");
                string logEntry = $"[{timestamp}] {message}\r\n";
                
                tbUniversalLog?.AppendText(logEntry);
                tbUniversalLog?.ScrollToCaret();
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
                if (tbUniversalLog?.Lines.Length > 500)
                {
                    var lines = tbUniversalLog.Lines;
                    var trimmedLines = new string[250];
                    Array.Copy(lines, lines.Length - 250, trimmedLines, 0, 250);
                    tbUniversalLog.Lines = trimmedLines;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {ex.Message}");
            }
        }

        #endregion
    }
}
