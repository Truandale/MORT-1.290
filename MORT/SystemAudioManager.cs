using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using NAudio.CoreAudioApi;

namespace MORT
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// </summary>
    public class SystemAudioManager : IDisposable
    {
        private MMDeviceEnumerator? _deviceEnumerator;
        private bool _disposed = false;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        private MMDevice? _originalDefaultMicrophone;
        private MMDevice? _originalDefaultSpeakers;
        private MMDevice? _originalDefaultCommunicationMicrophone;
        private MMDevice? _originalDefaultCommunicationSpeakers;

        public event Action<string>? OnLog;

        public SystemAudioManager()
        {
            _deviceEnumerator = new MMDeviceEnumerator();
            SaveOriginalDevices();
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        /// </summary>
        private void SaveOriginalDevices()
        {
            try
            {
                if (_deviceEnumerator == null) return;

                _originalDefaultMicrophone = _deviceEnumerator.GetDefaultAudioEndpoint(DataFlow.Capture, Role.Multimedia);
                _originalDefaultSpeakers = _deviceEnumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Multimedia);
                _originalDefaultCommunicationMicrophone = _deviceEnumerator.GetDefaultAudioEndpoint(DataFlow.Capture, Role.Communications);
                _originalDefaultCommunicationSpeakers = _deviceEnumerator.GetDefaultAudioEndpoint(DataFlow.Render, Role.Communications);

                OnLog?.Invoke("üíæ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è");
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∫ —É–º–æ–ª—á–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ (–º–∏–∫—Ä–æ—Ñ–æ–Ω)
        /// </summary>
        /// <param name="deviceId">ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</param>
        /// <param name="setAsCommunicationDevice">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–∂–µ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–≤—è–∑–∏</param>
        public bool SetDefaultInputDevice(string deviceId, bool setAsCommunicationDevice = true)
        {
            try
            {
                if (_deviceEnumerator == null) return false;

                var device = _deviceEnumerator.GetDevice(deviceId);
                if (device == null)
                {
                    OnLog?.Invoke($"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {deviceId}");
                    return false;
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º PolicyConfig API –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                var policyConfig = new PolicyConfigClient();
                
                // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                int result = policyConfig.SetDefaultEndpoint(deviceId, Role.Multimedia);
                if (result != 0)
                {
                    OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ (–º—É–ª—å—Ç–∏–º–µ–¥–∏–∞): {result}");
                    return false;
                }

                // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–≤—è–∑–∏
                if (setAsCommunicationDevice)
                {
                    result = policyConfig.SetDefaultEndpoint(deviceId, Role.Communications);
                    if (result != 0)
                    {
                        OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏ (—Å–≤—è–∑—å): {result}");
                    }
                }

                OnLog?.Invoke($"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {device.FriendlyName}");
                return true;
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∏: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∫ —É–º–æ–ª—á–∞–Ω–∏–µ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–¥–∏–Ω–∞–º–∏–∫–∏)
        /// </summary>
        /// <param name="deviceId">ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</param>
        /// <param name="setAsCommunicationDevice">–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–∫–∂–µ –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–≤—è–∑–∏</param>
        public bool SetDefaultOutputDevice(string deviceId, bool setAsCommunicationDevice = true)
        {
            try
            {
                if (_deviceEnumerator == null) return false;

                var device = _deviceEnumerator.GetDevice(deviceId);
                if (device == null)
                {
                    OnLog?.Invoke($"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {deviceId}");
                    return false;
                }

                var policyConfig = new PolicyConfigClient();
                
                // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                int result = policyConfig.SetDefaultEndpoint(deviceId, Role.Multimedia);
                if (result != 0)
                {
                    OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–º—É–ª—å—Ç–∏–º–µ–¥–∏–∞): {result}");
                    return false;
                }

                // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–≤—è–∑–∏
                if (setAsCommunicationDevice)
                {
                    result = policyConfig.SetDefaultEndpoint(deviceId, Role.Communications);
                    if (result != 0)
                    {
                        OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—Å–≤—è–∑—å): {result}");
                    }
                }

                OnLog?.Invoke($"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {device.FriendlyName}");
                return true;
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// –ò—â–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–æ FriendlyName, –∑–∞—Ç–µ–º –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        /// 
        /// –í–ê–ñ–ù–û: 
        /// - InputId (–º–∏–∫—Ä–æ—Ñ–æ–Ω/–∑–∞–ø–∏—Å—å) = "CABLE Output" –≤ DataFlow.Capture
        /// - OutputId (–¥–∏–Ω–∞–º–∏–∫–∏/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ) = "CABLE Input" –≤ DataFlow.Render
        /// </summary>
        public (string? inputId, string? outputId, string inputName, string outputName) FindVBCableDevices()
        {
            try
            {
                if (_deviceEnumerator == null) return (null, null, "", "");

                string? vbInputId = null;
                string? vbOutputId = null;
                string vbInputName = "";
                string vbOutputName = "";

                // –ü–æ–∏—Å–∫ VB-Cable Input (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏/–º–∏–∫—Ä–æ—Ñ–æ–Ω) —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                var inputDevices = _deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: CABLE Output (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏) –ø–æ FriendlyName
                foreach (var device in inputDevices)
                {
                    string deviceName = device.FriendlyName.ToLower();
                    if (deviceName.Contains("cable output"))
                    {
                        vbInputId = device.ID;
                        vbInputName = device.FriendlyName;
                        break;
                    }
                }

                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ "VB-Audio Virtual Cable"
                if (vbInputId == null)
                {
                    foreach (var device in inputDevices)
                    {
                        try
                        {
                            // –ò—â–µ–º —Ç–æ—á–Ω–æ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
                            var deviceDesc = device.DeviceFriendlyName?.ToLower() ?? "";
                            var deviceId = device.ID?.ToLower() ?? "";
                            
                            // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ "VB-Audio Virtual Cable"
                            if (deviceDesc.Contains("vb-audio virtual cable") || 
                                deviceId.Contains("vb-audio virtual cable"))
                            {
                                vbInputId = device.ID;
                                vbInputName = device.FriendlyName + " (–Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏)";
                                OnLog?.Invoke($"üîß VB-Cable Input –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏: VB-Audio Virtual Cable");
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                            OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {ex.Message}");
                        }
                    }
                }

                // –ü–æ–∏—Å–∫ VB-Cable Output (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è/–¥–∏–Ω–∞–º–∏–∫–∏)
                var outputDevices = _deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: CABLE Input (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è) –ø–æ FriendlyName
                foreach (var device in outputDevices)
                {
                    string deviceName = device.FriendlyName.ToLower();
                    if (deviceName.Contains("cable input") && !deviceName.Contains("16ch"))
                    {
                        vbOutputId = device.ID;
                        vbOutputName = device.FriendlyName;
                        break;
                    }
                }
                
                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: CABLE In 16ch –ø–æ FriendlyName (–µ—Å–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –Ω–µ—Ç)
                if (vbOutputId == null)
                {
                    foreach (var device in outputDevices)
                    {
                        string deviceName = device.FriendlyName.ToLower();
                        if (deviceName.Contains("cable") && deviceName.Contains("16ch"))
                        {
                            vbOutputId = device.ID;
                            vbOutputName = device.FriendlyName;
                            break;
                        }
                    }
                }

                // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π –ø–æ–∏—Å–∫ Output –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ "VB-Audio Virtual Cable"
                if (vbOutputId == null)
                {
                    foreach (var device in outputDevices)
                    {
                        try
                        {
                            // –ò—â–µ–º —Ç–æ—á–Ω–æ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö
                            var deviceDesc = device.DeviceFriendlyName?.ToLower() ?? "";
                            var deviceId = device.ID?.ToLower() ?? "";
                            
                            // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏ "VB-Audio Virtual Cable"
                            if (deviceDesc.Contains("vb-audio virtual cable") || 
                                deviceId.Contains("vb-audio virtual cable"))
                            {
                                vbOutputId = device.ID;
                                vbOutputName = device.FriendlyName + " (–Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏)";
                                OnLog?.Invoke($"üîß VB-Cable Output –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∏–º–µ–Ω–∏: VB-Audio Virtual Cable");
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                            OnLog?.Invoke($"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {ex.Message}");
                        }
                    }
                }

                if (vbInputId != null && vbOutputId != null)
                {
                    OnLog?.Invoke($"üîç –ù–∞–π–¥–µ–Ω—ã VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {vbInputName} | {vbOutputName}");
                }
                else
                {
                    OnLog?.Invoke("‚ö†Ô∏è VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VB-Cable —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
                }

                return (vbInputId, vbOutputId, vbInputName, vbOutputName);
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
                return (null, null, "", "");
            }
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ (—Ä–µ–∞–ª—å–Ω—ã–µ) –∞—É–¥–∏–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        /// –ò—Å–∫–ª—é—á–∞–µ—Ç –í–°–ï –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞–±–µ–ª–∏ VB-Audio
        /// </summary>
        public (List<(string id, string name)> microphones, List<(string id, string name)> speakers) FindPhysicalDevices()
        {
            var microphones = new List<(string id, string name)>();
            var speakers = new List<(string id, string name)>();

            try
            {
                if (_deviceEnumerator == null) return (microphones, speakers);

                // –ü–æ–∏—Å–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –í–°–ï VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
                var inputDevices = _deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Capture, DeviceState.Active);
                foreach (var device in inputDevices)
                {
                    string deviceName = device.FriendlyName.ToLower();
                    
                    // –ò—Å–∫–ª—é—á–∞–µ–º –í–°–ï VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: CABLE Input, CABLE In 16ch, CABLE Output
                    bool isVBCable = deviceName.Contains("cable input") || 
                                    deviceName.Contains("cable output") ||
                                    (deviceName.Contains("cable") && deviceName.Contains("16ch"));
                    
                    if (!isVBCable)
                    {
                        microphones.Add((device.ID, device.FriendlyName));
                    }
                }

                // –ü–æ–∏—Å–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –¥–∏–Ω–∞–º–∏–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –í–°–ï VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
                var outputDevices = _deviceEnumerator.EnumerateAudioEndPoints(DataFlow.Render, DeviceState.Active);
                foreach (var device in outputDevices)
                {
                    string deviceName = device.FriendlyName.ToLower();
                    
                    // –ò—Å–∫–ª—é—á–∞–µ–º –í–°–ï VB-Cable —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    bool isVBCable = deviceName.Contains("cable input") || 
                                    deviceName.Contains("cable output") ||
                                    (deviceName.Contains("cable") && deviceName.Contains("16ch"));
                    
                    if (!isVBCable)
                    {
                        speakers.Add((device.ID, device.FriendlyName));
                    }
                }

                OnLog?.Invoke($"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {microphones.Count} –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤, {speakers.Count} –¥–∏–Ω–∞–º–∏–∫–æ–≤");
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
            }

            return (microphones, speakers);
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        /// </summary>
        public bool RestoreOriginalDevices()
        {
            try
            {
                bool success = true;

                if (_originalDefaultMicrophone != null)
                {
                    if (!SetDefaultInputDevice(_originalDefaultMicrophone.ID, false))
                        success = false;
                }

                if (_originalDefaultSpeakers != null)
                {
                    if (!SetDefaultOutputDevice(_originalDefaultSpeakers.ID, false))
                        success = false;
                }

                if (_originalDefaultCommunicationMicrophone != null)
                {
                    var policyConfig = new PolicyConfigClient();
                    policyConfig.SetDefaultEndpoint(_originalDefaultCommunicationMicrophone.ID, Role.Communications);
                }

                if (_originalDefaultCommunicationSpeakers != null)
                {
                    var policyConfig = new PolicyConfigClient();
                    policyConfig.SetDefaultEndpoint(_originalDefaultCommunicationSpeakers.ID, Role.Communications);
                }

                if (success)
                {
                    OnLog?.Invoke("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
                }
                else
                {
                    OnLog?.Invoke("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤");
                }

                return success;
            }
            catch (Exception ex)
            {
                OnLog?.Invoke($"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {ex.Message}");
                return false;
            }
        }

        public void Dispose()
        {
            if (!_disposed)
            {
                _deviceEnumerator?.Dispose();
                _disposed = true;
            }
        }
    }

    /// <summary>
    /// PolicyConfig API –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// </summary>
    [ComImport]
    [Guid("f8679f50-850a-41cf-9c72-430f290290c8")]
    [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
    interface IPolicyConfig
    {
        [PreserveSig]
        int GetMixFormat(string deviceId, IntPtr format);
        
        [PreserveSig]
        int GetDeviceFormat(string deviceId, bool defaultDevice, IntPtr format);
        
        [PreserveSig]
        int ResetDeviceFormat(string deviceId);
        
        [PreserveSig]
        int SetDeviceFormat(string deviceId, IntPtr endpointFormat, IntPtr mixFormat);
        
        [PreserveSig]
        int GetProcessingPeriod(string deviceId, bool defaultDevice, out long defaultPeriod, out long minimumPeriod);
        
        [PreserveSig]
        int SetProcessingPeriod(string deviceId, ref long period);
        
        [PreserveSig]
        int GetShareMode(string deviceId, IntPtr mode);
        
        [PreserveSig]
        int SetShareMode(string deviceId, IntPtr mode);
        
        [PreserveSig]
        int GetPropertyValue(string deviceId, ref PropertyKey key, IntPtr value);
        
        [PreserveSig]
        int SetPropertyValue(string deviceId, ref PropertyKey key, IntPtr value);
        
        [PreserveSig]
        int SetDefaultEndpoint(string deviceId, Role role);
        
        [PreserveSig]
        int SetEndpointVisibility(string deviceId, bool visible);
    }

    [ComImport]
    [Guid("568b9108-44bf-40b4-9006-86afe5b5a620")]
    class PolicyConfigClient : IPolicyConfig
    {
        public extern int GetMixFormat(string deviceId, IntPtr format);
        public extern int GetDeviceFormat(string deviceId, bool defaultDevice, IntPtr format);
        public extern int ResetDeviceFormat(string deviceId);
        public extern int SetDeviceFormat(string deviceId, IntPtr endpointFormat, IntPtr mixFormat);
        public extern int GetProcessingPeriod(string deviceId, bool defaultDevice, out long defaultPeriod, out long minimumPeriod);
        public extern int SetProcessingPeriod(string deviceId, ref long period);
        public extern int GetShareMode(string deviceId, IntPtr mode);
        public extern int SetShareMode(string deviceId, IntPtr mode);
        public extern int GetPropertyValue(string deviceId, ref PropertyKey key, IntPtr value);
        public extern int SetPropertyValue(string deviceId, ref PropertyKey key, IntPtr value);
        
        [PreserveSig]
        public extern int SetDefaultEndpoint(string deviceId, Role role);
        
        public extern int SetEndpointVisibility(string deviceId, bool visible);
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct PropertyKey
    {
        public Guid fmtid;
        public uint pid;
    }
}
